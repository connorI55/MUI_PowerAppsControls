#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (C) Microsoft Corporation. All rights reserved.
var apptelemetryclient_1 = require("../generated/telemetry/apptelemetryclient");
var PackageVersionUtils_1 = require("../generated/PackageVersionUtils");
var pp_tooling_telemetry_node_1 = require("../generated/pp-tooling-telemetry-node");
var path = require('path');
var fs = require('fs');
var argv = require('yargs').argv;
var bs = require('browser-sync').create();
Run();
function Run() {
    var telemetryEnv = pp_tooling_telemetry_node_1.AppTelemetryConfigUtility.createGlobalTelemetryEnvironment();
    var version = PackageVersionUtils_1.getPackageVersion('pcf-start', process.cwd()) || '0.0.1';
    var telemetryClient = apptelemetryclient_1.setupAppInsightsAndClient('pcf-start', version, telemetryEnv);
    console.log("\nStarting control harness...");
    var startTime = Date.now();
    var sessionStartProperties = __assign({}, pp_tooling_telemetry_node_1.AppTelemetryUtility.createCommonAppStartProperties(telemetryEnv));
    var argumentNamesCsv = '';
    if (argv.watch) {
        argumentNamesCsv += ',watch';
    }
    if (argv.codePath) {
        argumentNamesCsv += ',codePath';
    }
    if (argumentNamesCsv) {
        sessionStartProperties['argumentNamesCsv'] = argumentNamesCsv.substring(1); // trim off start comma
    }
    var resultCode = 0;
    try {
        telemetryClient.trackEvent({
            name: apptelemetryclient_1.TelemetryEvent[apptelemetryclient_1.TelemetryEvent.Start],
            properties: __assign({}, sessionStartProperties)
        });
        resultCode = RunTask();
    }
    catch (e) {
        resultCode = 500;
        console.error("[pcf-start] [Error] encountered unexpected error:\n" + e);
        telemetryClient.trackException({ exception: e, properties: { trackedAtMemberName: 'Run' } });
    }
    finally {
        var isSuccessful = resultCode === 200;
        process.exitCode = isSuccessful ? 0 : 1;
        telemetryClient.trackEvent({ name: apptelemetryclient_1.TelemetryEvent[apptelemetryclient_1.TelemetryEvent.End] });
        telemetryClient.trackRequest({
            name: 'Session',
            url: '',
            duration: Date.now() - startTime,
            resultCode: resultCode,
            success: isSuccessful,
            properties: __assign({}, sessionStartProperties)
        });
        telemetryClient.flush();
    }
}
function RunTask() {
    var codePath = argv.codePath;
    // default to cwd if not specified
    if (!codePath || codePath === true) {
        codePath = '.';
    }
    else if (!fs.existsSync(path.resolve(process.cwd(), codePath))) {
        console.error("The specified codePath '" + codePath + "' does not exist.");
        return 400;
    }
    // Start server
    bs.init({
        online: false,
        port: 8181,
        reloadDelay: 1000,
        server: {
            baseDir: path.resolve(process.cwd(), codePath),
            routes: {
                '/': path.join(__dirname, '../')
            }
        },
        ui: false,
        watch: true // node_modules ignored automatically
    });
    return 200;
}
