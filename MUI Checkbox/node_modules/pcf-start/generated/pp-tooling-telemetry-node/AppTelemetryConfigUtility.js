"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserSettingsFromSharedInstall = exports.createGlobalTelemetryEnvironment = void 0;
var TelemetryUserSettingsFileProvider_1 = require("./TelemetryUserSettingsFileProvider");
var AppTelemetryUtility_1 = require("./AppTelemetryUtility");
var TelemetryConstants_1 = require("./TelemetryConstants");
var process = require("process");
var path = require("path");
var os = require("os");
var uuid = require("uuid");
function createGlobalTelemetryEnvironment(getEnvironmentVariable) {
    if (getEnvironmentVariable === void 0) { getEnvironmentVariable = getEnvironmentVariableFromProcess; }
    return {
        optOut: AppTelemetryUtility_1.parseBooleanEnvironmentVariable(getEnvironmentVariable(TelemetryConstants_1.EnvironmentVariableNames.PpToolsTelemetryOptOut)),
        developerMode: AppTelemetryUtility_1.parseBooleanEnvironmentVariable(getEnvironmentVariable(TelemetryConstants_1.EnvironmentVariableNames.PpToolsTelemetryDeveloperMode)),
        dataBoundary: getEnvironmentVariable(TelemetryConstants_1.EnvironmentVariableNames.PpToolsTelemetryDataBoundary),
        automationAgent: getEnvironmentVariable(TelemetryConstants_1.EnvironmentVariableNames.PpToolsAutomationAgent),
    };
}
exports.createGlobalTelemetryEnvironment = createGlobalTelemetryEnvironment;
function getEnvironmentVariableFromProcess(name) {
    return process.env[name];
}
function getUserSettingsFromSharedInstall(logger) {
    var userSettingsPath = path.join(getAppDataPath(), 'Microsoft', 'PowerAppsCli', 'usersettings.json');
    var userSettingsProvider = new TelemetryUserSettingsFileProvider_1.TelemetryUserSettingsFileProvider(userSettingsPath);
    return getCurrentUserSettingsOrDefault(userSettingsProvider, logger);
}
exports.getUserSettingsFromSharedInstall = getUserSettingsFromSharedInstall;
function getAppDataPath() {
    var platform = os.platform();
    switch (platform) {
        case 'darwin':
            return '~/Library/';
        case 'linux':
            return process.env.HOME + "/.config/";
        case 'win32':
            return process.env.LOCALAPPDATA;
        default:
            throw new Error("Platform \"" + platform + "\" is not currently supported");
    }
}
function getCurrentUserSettingsOrDefault(provider, logger) {
    try {
        return provider.GetCurrent();
    }
    catch (error) {
        logger === null || logger === void 0 ? void 0 : logger.error("[pp-tooling-telemetry-node]: ITelemetryUserSettingsProvider.GetCurrent threw unexpected error. Returning new user settings. Error: " + error);
        return {
            uniqueId: uuid.v4(),
            telemetryEnabled: true,
        };
    }
}
