var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { render, rehydrate } from 'fela-dom';
import objectEach from 'fast-loops/lib/objectEach';

function hasDOM(renderer, targetDocument) {
  // ensure we're on a browser by using document since window is defined in e.g. React Native
  // see https://github.com/robinweser/fela/issues/736
  if (typeof document === 'undefined') {
    return false;
  }

  var doc = targetDocument || document;

  return renderer && !renderer.isNativeRenderer && doc && doc.createElement;
}

function hasServerRenderedStyle() {
  var targetDocument = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;

  return targetDocument.querySelectorAll('[data-fela-type]').length > 0;
}

export default function RendererProviderFactory(BaseComponent, RendererContext, createElement, renderChildren, statics) {
  var RendererProvider = function (_BaseComponent) {
    _inherits(RendererProvider, _BaseComponent);

    function RendererProvider(props, context) {
      _classCallCheck(this, RendererProvider);

      var _this = _possibleConstructorReturn(this, (RendererProvider.__proto__ || Object.getPrototypeOf(RendererProvider)).call(this, props, context));

      _this._renderStyle();
      return _this;
    }

    _createClass(RendererProvider, [{
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        // TODO: we might add a shallow compare to avoid unnecessary rerenders
        this._renderStyle();
      }
    }, {
      key: '_renderStyle',
      value: function _renderStyle() {
        var _props = this.props,
            renderer = _props.renderer,
            shouldRehydrate = _props.rehydrate,
            targetDocument = _props.targetDocument;


        if (hasDOM(renderer, targetDocument)) {
          if (shouldRehydrate && hasServerRenderedStyle(targetDocument)) {
            rehydrate(renderer, targetDocument);
          } else {
            render(renderer, targetDocument);
          }
        }
      }
    }, {
      key: 'render',
      value: function render() {
        return createElement(RendererContext.Provider, {
          value: this.props.renderer
        }, renderChildren(this.props.children));
      }
    }]);

    return RendererProvider;
  }(BaseComponent);

  if (statics) {
    objectEach(statics, function (value, key) {
      RendererProvider[key] = value;
    });
  }

  return RendererProvider;
}