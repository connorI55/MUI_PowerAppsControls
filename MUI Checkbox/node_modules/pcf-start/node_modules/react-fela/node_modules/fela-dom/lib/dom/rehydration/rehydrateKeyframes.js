'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = rehydrateKeyframes;

var _felaUtils = require('fela-utils');

var RE = /@(-webkit-|-moz-)?keyframes ([a-z_][a-z0-9-_]*)(\{.*?(?=}})}})/gi;

function rehydrateKeyframes(css) {
  var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var decl = void 0;

  while (decl = RE.exec(css)) {
    var _decl = decl,
        _decl2 = _slicedToArray(_decl, 4),
        keyframe = _decl2[0],
        prefix = _decl2[1],
        animationName = _decl2[2],
        reference = _decl2[3];

    if (!cache[reference]) {
      cache[reference] = {
        type: _felaUtils.KEYFRAME_TYPE,
        keyframe: keyframe,
        name: animationName
      };
    } else {
      cache[reference].keyframe += keyframe;
    }
  }

  return cache;
}