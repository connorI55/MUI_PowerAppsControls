var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// $FlowFixMe
import { useContext } from 'react';
import { combineRules } from 'fela';

import { RendererContext, ThemeContext } from './context';

export default function useFela() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var renderer = useContext(RendererContext);
  var theme = useContext(ThemeContext) || {};

  if (!renderer) {
    throw new Error('The "useFela" hook can only be used  inside a "RendererProvider"');
  }

  var propsWithTheme = _extends({}, props, {
    theme: theme
  });

  function css() {
    return renderer.renderRule(combineRules.apply(undefined, arguments), propsWithTheme);
  }

  return {
    renderer: renderer,
    theme: theme,
    css: css
  };
}