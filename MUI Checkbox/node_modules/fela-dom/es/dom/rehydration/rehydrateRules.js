var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

import { RULE_TYPE, generateDeclarationReference } from 'fela-utils';

import generateCacheEntry from './generateCacheEntry';

// Escaping for RegExp taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping
function escapeRegExp(string) {
  return string.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&');
}

export default function rehydrateRules(css) {
  var media = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var support = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var cache = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var specificityPrefix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';

  var decl = void 0;
  var DECL_REGEX = new RegExp(escapeRegExp(specificityPrefix) + '[.]([0-9a-z_-]+)([^{]+)?{([^:]+):([^}]+)}', 'gi');

  // This excellent parsing implementation was originally taken from Styletron and modified to fit Fela
  // https://github.com/rtsao/styletron/blob/master/packages/styletron-client/src/index.js#L47
  /* eslint-disable no-unused-vars,no-cond-assign */
  while (decl = DECL_REGEX.exec(css)) {
    // $FlowFixMe
    var _decl = decl,
        _decl2 = _slicedToArray(_decl, 5),
        ruleSet = _decl2[0],
        className = _decl2[1],
        pseudo = _decl2[2],
        property = _decl2[3],
        value = _decl2[4];
    /* eslint-enable */

    var declarationReference = generateDeclarationReference(property, value, pseudo, media, support);

    cache[declarationReference] = generateCacheEntry(RULE_TYPE, className, property, value, pseudo, media, support, specificityPrefix);
  }

  return cache;
}