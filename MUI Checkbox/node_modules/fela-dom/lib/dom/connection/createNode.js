'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = createNode;

var _objectReduce = require('fast-loops/lib/objectReduce');

var _objectReduce2 = _interopRequireDefault(_objectReduce);

var _getNodeSibling = require('./getNodeSibling');

var _getNodeSibling2 = _interopRequireDefault(_getNodeSibling);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function createNode(attributes) {
  var targetDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
  var sortMediaQuery = arguments[2];
  var styleNodeAttributes = arguments[3];

  var head = targetDocument.head || {};
  var type = attributes.type,
      media = attributes.media,
      support = attributes.support;


  var node = targetDocument.createElement('style');
  node.setAttribute('data-fela-type', type);
  node.type = 'text/css';

  if (support) {
    node.setAttribute('data-fela-support', 'true');
  }

  if (media) {
    node.media = media;
  }

  // applying custom style tag attributes
  for (var attribute in styleNodeAttributes) {
    node.setAttribute(attribute, styleNodeAttributes[attribute]);
  }

  // also apply attributes set globally with window.FelaConfig
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== undefined && window.FelaConfig) {
    for (var _attribute in window.FelaConfig.styleNodeAttributes) {
      node.setAttribute(_attribute, window.FelaConfig.styleNodeAttributes[_attribute]);
    }
  }

  var nodes = head.querySelectorAll('[data-fela-type]');
  var sibling = (0, _getNodeSibling2.default)([].concat(_toConsumableArray(nodes)), attributes, sortMediaQuery);

  if (sibling) {
    head.insertBefore(node, sibling);
  } else {
    head.appendChild(node);
  }

  return node;
}