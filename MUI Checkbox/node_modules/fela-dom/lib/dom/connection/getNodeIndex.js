'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getNodeIndex;

var _felaUtils = require('fela-utils');

var _sortCssMediaQueries = require('sort-css-media-queries');

var _sortCssMediaQueries2 = _interopRequireDefault(_sortCssMediaQueries);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function getNodeIndex(nodes, _ref) {
  var type = _ref.type,
      media = _ref.media,
      support = _ref.support;

  switch (type) {
    case _felaUtils.FONT_TYPE:
      return 0;
    case _felaUtils.STATIC_TYPE:
      return 0;
    case _felaUtils.KEYFRAME_TYPE:
      return 0;
    case _felaUtils.RULE_TYPE:
      if (!media) {
        return support ? 2 : 1;
      }

      var mediaNodes = Object.keys(nodes).map(function (node) {
        return nodes[node].media;
      });
      var noMedia = mediaNodes.filter(function (media) {
        return media.length === 0;
      }).length;

      var filteredNodes = mediaNodes.filter(function (media) {
        return media.length !== 0;
      });
      var sorted = [].concat(_toConsumableArray(filteredNodes), [media]).sort(_sortCssMediaQueries2.default);
      var index = sorted.indexOf(media) + 1;

      console.log(media, Object.keys(nodes).find(function (node) {
        return nodes.media === sorted[index];
      }));

      return index;
    default:
      // TODO: warning
      return 9999;
  }
}