// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

function isJavaScriptXMLHttpRequest(node) {
    if (node) {
        if (node.type === "NewExpression") {
            node = node.callee;
        }

        return node.type === "Identifier"
            && node.name === "XMLHttpRequest";
    }

    return false;
}

function isJQueryXMLHttpRequest(node) {

    const callName = getFullyQualifiedMemberExpressionName(node.callee);

    return jQueryAjaxXmlHttpRequestStrings.includes(callName);
}

function isExternalLibraryCall(node) {
    const funcName = node.property.name;

    return (funcName in xrmServiceToolkitRestMethods
        || funcName in xrmServiceToolkitSoapMethods
        || funcName in xrmServiceToolkitSoapSyncMethods
        || funcName in soapSDKSynchronousMethods);
}

function getFullyQualifiedMemberExpressionName(node) {
    if (node && node.type === "MemberExpression") {
        let name = node.property.name;

        if (node.object.type === "MemberExpression") {
            // Recurse the chained member expression
            name  = getFullyQualifiedMemberExpressionName(node.object) + "." + name;
        } else if (node.object.name) {
            name = node.object.name + "." + name;
        } else if (node.object.type === "CallExpression") {
            if (node.object.callee.type === "MemberExpression") {
                name = getFullyQualifiedMemberExpressionName(node.object.callee) + "." + name;
            } else if (node.property) {
                name = node.property.name + "." + name;
            }
        } else if (node.object.type === "ThisExpression") {
            name = "this." + name;
        }
        
        return name;
    }
}

const jQueryAjaxXmlHttpRequestStrings = [
    "$.ajax",
    "jQuery.ajax",
    "$.ajaxSetup",
    "jQuery.ajaxSetup",
    "$.get",
    "jQuery.get",
    "$.getJSON",
    "jQuery.getJSON",
    "$.getScript",
    "jQuery.getScript",
    "$.post",
    "jQuery.post",
    "$.ajaxPrefilter",
    "jQuery.ajaxPrefilter"
];

//------------------------------------------------------------------------------
// Datasets
//------------------------------------------------------------------------------

const xrmServiceToolkitRestMethods = {
    Associate: "POST [Organization URI]/api/data/v9.0/[entityName]([entity id]). To relate the entity, pass a data object into the body of the request with the navigation property of the new entity with '@odata.id' appended as the key, and set the value as [Organization URI]/api/data/v9.0/[navigation property]([navigation property id])",
    Create: "POST [Organization URI]/api/data/v9.0/[entityName]. Pass the new entity as the data object in the body of the request",
    Delete: "DELETE [Organization URI]/api/data/v9.0/[entityName]([entity id guid])",
    Disassociate: "DELETE [Organization URI]/api/data/v9.0/[entity name]([entity id])/[navigation property of related entity]/$ref?$id=[Organization URI]/api/data/v9.0/[related entity name]([related entity id])",
    Retrieve: "GET [Organization URI]/api/data/v9.0/[entityName]([entity id guid])",
    RetrieveMultiple: "It is recommended that you leverage functionality provided by Web API instead",
    Update: "PATCH [Organization URI]/api/data/v9.0/entityName([entity id guid]). Pass the updated entries within a data object in the request body"
};

const xrmServiceToolkitSoapMethods = {
    Assign: "It is recommended that you leverage functionality provided by Web API instead",
    Associate: "POST [Organization URI]/api/data/v9.0/[entityName]([entity id]). To relate the entity, pass a data object into the body of the request with the navigation property of the new entity with '@odata.id' appended as the key, and set the value as [Organization URI]/api/data/v9.0/[navigation property]([navigation property id])",
    Create: "POST [Organization URI]/api/data/v9.0/[entityName]. Pass the new entity as the data object in the body of the request",
    Delete: "DELETE [Organization URI]/api/data/v9.0/[entityName]([entity id guid])",
    Disassociate: "DELETE [Organization URI]/api/data/v9.0/[entity name]([entity id])/[navigation property of related entity]/$ref?$id=[Organization URI]/api/data/v9.0/[related entity name]([related entity id])",
    Execute: "It is recommended that you leverage functionality provided by Web API instead",
    Fetch: "It is recommended that you leverage functionality provided by Web API instead",
    GrantAccess: "It is recommended that you leverage functionality provided by Web API instead",
    ModifyAccess: "It is recommended that you leverage functionality provided by Web API instead",
    QueryAll: "GET [Organization URI]/api/data/v9.0/[entity name]?$select=[attribute]&$top=3",
    QueryByAttribute: "GET [Organization URI]/api/data/v9.0/accounts?$select=[attribute]",
    Retrieve: "GET [Organization URI]/api/data/v9.0/[entityName]([entity id guid])",
    RetrieveMultiple: "It is recommended that you leverage functionality provided by Web API instead",
    SetState: "It is recommended that you leverage functionality provided by Web API instead",
    RevokeAccess: "It is recommended that you leverage functionality provided by Web API instead",
    RetrieveAllEntitiesMetadata: "GET [Organization URI]/api/data/v9.0/EntityDefinitions(LogicalName=[entity name])?$select=[entity setName properties]",
    RetrieveAttributeMetadata: "GET [Organization URI]/api/data/v9.0/EntityDefinitions(LogicalName='[entity name]')/Attributes(LogicalName='[attribute name]')",
    RetrieveEntityMetadata: "GET [Organization URI]/api/data/v9.0/EntityDefinitions(LogicalName='[entity name]')",
    RetrievePrincipalAccess: "It is recommended that you leverage functionality provided by Web API instead",
    Update: "PATCH [Organization URI]/api/data/v9.0/entityName([entity id guid]). Pass the updated entries within a data object in the request body"
};

const xrmServiceToolkitSoapSyncMethods = {
    GetCurrentUserBusinessUnitId: "GET [Organization URI]/api/data/v9.0/businessunits",
    GetCurrentUserId: "GET [Organization URI]/api/data/v8.2/roles?$select=name",
    GetCurrentUserRoles: "GET [Organization URI]/api/data/v8.2/roles?$select=name",
    IsCurrentUserRole: "GET [Organization URI]/api/data/v8.2/roles?$select=name"
};

const soapSDKSynchronousMethods = {
    associate: "POST [Organization URI]/api/data/v9.0/[entityName]([entity id]). To relate the entity, pass a data object into the body of the request with the navigation property of the new entity with '@odata.id' appended as the key, and set the value as [Organization URI]/api/data/v9.0/[navigation property]([navigation property id])",
    create: "POST [Organization URI]/api/data/v9.0/[entityName]. Pass the new entity as the data object in the body of the request",
    del: "DELETE [Organization URI]/api/data/v9.0/[entityName]([entity id guid])",
    disassociate: "DELETE [Organization URI]/api/data/v9.0/[entity name]([entity id])/[navigation property of related entity]/$ref?$id=[Organization URI]/api/data/v9.0/[related entity name]([related entity id])",
    execute: "It is recommended that you leverage functionality provided by Web API instead",
    retrieve: "GET [Organization URI]/api/data/v9.0/[entityName]([entity id guid])",
    retrieveMultiple: "It is recommended that you leverage functionality provided by Web API instead",
    update: "PATCH [Organization URI]/api/data/v9.0/entityName([entity id guid]). Pass the updated entries within a data object in the request body"
};

const xrmServiceToolkitRestApi = "XrmServiceToolkit.Rest";
const xrmServiceToolkitSoapApi = "XrmServiceToolkit.Soap";
const syncSoapSdkApi = "Sdk.Sync";

module.exports = {
    isJavaScriptXMLHttpRequest,
    isJQueryXMLHttpRequest,
    isExternalLibraryCall,
    getFullyQualifiedMemberExpressionName,
    jQueryAjaxXmlHttpRequestStrings,
    xrmServiceToolkitRestMethods,
    xrmServiceToolkitSoapMethods,
    xrmServiceToolkitSoapSyncMethods,
    soapSDKSynchronousMethods,
    xrmServiceToolkitRestApi,
    xrmServiceToolkitSoapApi,
    syncSoapSdkApi
};
