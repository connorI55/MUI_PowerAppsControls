// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");
const noRestrictedProperties = require("../utils/restricted-property");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const MESSAGE_ID_CURRENTCONTROL = "message4";
const MESSAGE_ID_AUTHHEADER = "message5";
const MESSAGE_ID_OUTLOOK = "message6";
const MESSAGE_ID_GETURL = "message7";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        hasSuggestions: true,

        type: "problem",

        docs: {
            description: "Do not use the deprecated Microsoft Dynamics CRM 2011 object model",
            category: "Upgrade Readiness",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/avoid-2011-api"
        },

        messages: {
            [MESSAGE_ID_CURRENTCONTROL]: "'Xrm.Page.ui.getCurrentControl' has been removed. It was announced as deprecated in Dynamics CRM 2013. Use an alternative approach to your logic as there is no replacement API.",
            [MESSAGE_ID_GETURL]: "'getServerUrl' has been removed. Use 'getClientUrl' instead.",
            [MESSAGE_ID_AUTHHEADER]: "'getAuthenticationHeader' is an API that was removed starting with Dynamics 365. Consider using a different approach with your logic to no longer rely on this feature, such as leveraging Web API or a modern client API. There is no replacement for this API.",
            [MESSAGE_ID_OUTLOOK]: "'isOutlookClient' and 'isOutlookOnline' have been removed starting with Dynamics 365. Use 'getClient' instead of 'isOutlookClient' and use 'getClientState' instead of 'isOutlookOnline'."
        }
    },

    create(context) {

        let optionsOverride = [
            {
                object: "Xrm.Page.context",
                property: "getServerUrl",
                messageId: MESSAGE_ID_GETURL,
                disallowParent: true
            },
            {
                object: "Xrm.Utility.getGlobalContext",
                property: "getServerUrl",
                messageId: MESSAGE_ID_GETURL,
                disallowParent: true
            },
            {
                object: "GetGlobalContext",
                property: "getServerUrl",
                messageId: MESSAGE_ID_GETURL,
                disallowParent: true
            },
            {
                object: "Xrm.Page.context",
                property: "isOutlookClient",
                messageId: MESSAGE_ID_OUTLOOK,
                disallowParent: true
            },
            {
                object: "Xrm.Utility.getGlobalContext",
                property: "isOutlookClient",
                messageId: MESSAGE_ID_OUTLOOK,
                disallowParent: true
            },
            {
                object: "GetGlobalContext",
                property: "isOutlookClient",
                messageId: MESSAGE_ID_OUTLOOK,
                disallowParent: true
            },
            {
                object: "Xrm.Page.context",
                property: "isOutlookOnline",
                messageId: MESSAGE_ID_OUTLOOK,
                disallowParent: true
            },
            {
                object: "Xrm.Utility.getGlobalContext",
                property: "isOutlookOnline",
                messageId: MESSAGE_ID_OUTLOOK,
                disallowParent: true
            },
            {
                object: "GetGlobalContext",
                property: "isOutlookOnline",
                messageId: MESSAGE_ID_OUTLOOK,
                disallowParent: true
            },
            {
                object: "Xrm.Page.context",
                property: "getAuthenticationHeader",
                messageId: MESSAGE_ID_AUTHHEADER,
                disallowParent: true
            },
            {
                object: "Xrm.Utility.getGlobalContext",
                property: "getAuthenticationHeader",
                messageId: MESSAGE_ID_AUTHHEADER,
                disallowParent: true
            },
            {
                object: "GetGlobalContext",
                property: "getAuthenticationHeader",
                messageId: MESSAGE_ID_AUTHHEADER,
                disallowParent: true
            },
            {
                object: "Xrm.Page.ui",
                property: "getCurrentControl",
                messageId: MESSAGE_ID_CURRENTCONTROL,
                disallowParent: true
            }
        ];

        const reporter = function (context, node, isMatchedProperty, data, snippet) {
            let suggest = undefined;
            let expressionText = context.getSourceCode().getText(node);

            // Each of these is a CallExpression, however, the node reported here will be a MemberExpression, which does not include the params and parens.
            node = node.parent;

            // MESSAGE_ID_AUTHHEADER does not have an obvious replacement and MESSAGE_ID_CURRENTCONTROL has no replacement.
            // In the suggest we also want to take into consideration that the dev may be in the context of an HTML web resource,
            // which does not have access to Xrm.* and they may be including ClientGlobalContext.js.aspx as a reference, which
            // gives access to the GetGlobalContext() function. Replace as appropriately as possible.
            // https://docs.microsoft.com/powerapps/developer/model-driven-apps/clientapi/reference/getglobalcontext-clientglobalcontext.js.aspx
            switch (data.messageId) {

                // This messageId is shared for two APIs.
                case MESSAGE_ID_OUTLOOK:
                    if (expressionText.includes("isOutlookClient")) {
                        suggest = [{
                            desc: "Replace with client context's getClient()",
                            fix: function (fixer) {
                                if (expressionText.includes("GetGlobalContext")) {
                                    return fixer.replaceText(node, "GetGlobalContext().client.getClient() === 'Outlook'");
                                }
                                return fixer.replaceText(node, "Xrm.Utility.getGlobalContext().client.getClient() === 'Outlook'");
                            }
                        }];
                    }
                    else if (expressionText.includes("isOutlookOnline")) {
                        suggest = [{
                            desc: "Replace with client context's getClientState()",
                            fix: function (fixer) {
                                if (expressionText.includes("GetGlobalContext")) {
                                    return fixer.replaceText(node, "GetGlobalContext().client.getClientState() === 'Online'");
                                }
                                return  fixer.replaceText(node, "Xrm.Utility.getGlobalContext().client.getClientState() === 'Online'");
                            }
                        }];
                    }
                    break;

                case MESSAGE_ID_GETURL:
                    suggest = [{
                        desc: "Replace with client context's getClientUrl",
                        fix: function (fixer) {
                            if (expressionText.includes("GetGlobalContext")) {
                                return fixer.replaceText(node, "GetGlobalContext().getClientUrl()");
                            }
                            return fixer.replaceText(node, "Xrm.Utility.getGlobalContext().getClientUrl()");
                        }
                    }];
                    break;
            }

            ruleUtils.reportAccordingly(context, node, data.messageId, undefined, snippet, undefined, suggest);
        };

        let ruleLogic = new noRestrictedProperties(context, optionsOverride, reporter);

        return {            
            VariableDeclarator: function (node) { ruleLogic.processVariableDeclarator(node, context) },
            MemberExpression: function (node) { ruleLogic.processMemberExpression(node, context) }
        };
    }
};
