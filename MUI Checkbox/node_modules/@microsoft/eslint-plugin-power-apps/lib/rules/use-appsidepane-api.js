// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = 
require("../utils/rule-utils");
const noRestrictedProperties = require("../utils/restricted-property");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const MESSAGE_ID = "message1";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        hasSuggestions: true,
        type: "problem",
        docs: {
            description: "Use the AppSidePane APIs",
            category: "Upgrade Readiness",
            recommended: true,
            url: "https://learn.microsoft.com/en-us/power-apps/developer/model-driven-apps/clientapi/reference/xrm-app-appsidepane"
        },
        messages: {
            [MESSAGE_ID]: "'{{ arg0 }}' API is being replaced as it only supports a single pane. Replace this call with the following client object model API: '{{ arg1 }}.'"
        }
    },

    create(context) {

        let optionsOverride = [
            {
                object: "Xrm.Panel",
                property: "loadPanel",
                messageId: MESSAGE_ID,
                disallowParent: true
            }
        ];

        const reporter = function (context, node, isMatchedProperty, data, snippet) {
            let suggest = undefined;
            let dataParam = undefined;
            let sourceCode = context.getSourceCode();
            // Each of these is a CallExpression, however, the node reported here will be a MemberExpression, which does not include the params and parens.
            node = node.parent;
            let expressionText = sourceCode.getText(node);
            
            // Get the message parameter.
            let args = node.arguments;

            if (expressionText.includes(".loadPanel(")) {
                dataParam = [expressionText, "Xrm.App.sidePanes.createPane"];

                suggest = [{
                    desc: "Replace with Xrm.App.sidePanes.createPane template",
                    fix: function (fixer) {
                        // There may not be a success handler param so handle if it does and does not exist.
                        let successHandlerSnippet = args.length === 1
                            ? "function success(result) {\n\t\t// logic on success\n}"
                            : sourceCode.getText(args[1]);

                        let replacementSnippet = `Xrm.App.sidePanes.createPane(paneOptions);`;

                        return fixer.replaceText(node, replacementSnippet);
                    }
                }];
            }

            ruleUtils.reportAccordingly(context, node, data.messageId, dataParam, snippet, undefined, suggest);
        };

        let ruleLogic = new noRestrictedProperties(context, optionsOverride, reporter);

        return {
            VariableDeclarator: function (node) { ruleLogic.processVariableDeclarator(node, context) },
            MemberExpression: function (node) { ruleLogic.processMemberExpression(node, context) }
        }
    }
}