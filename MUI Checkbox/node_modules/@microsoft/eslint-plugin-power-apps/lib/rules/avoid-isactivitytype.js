// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");
const noRestrictedProperties = require("../utils/restricted-property");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const MESSAGE_ID = "message2";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        hasSuggestions: true,
        type: "problem",
        docs: {
            category: "Upgrade Readiness",
            description: "Prefer avoiding usage of Xrm.Utility.isActivityType",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/avoid-isActivityType"
        },

        messages: {
            [MESSAGE_ID]: "'Xrm.Utility.isActivityType' is a deprecated function. Replace this call with 'Xrm.Utility.getEntityMetadata'. Note: The new API is asynchronous so you will need to follow the new promise model for usage within a ribbon rule."
        }
    },

    create(context) {

        let optionsOverride = [
            {
                object: "Xrm.Utility",
                property: "isActivityType",
                messageId: MESSAGE_ID,
                disallowParent: true
            }
        ];

        const reporter = function (context, node, isMatchedProperty, data, snippet) {

            // Each of these is a CallExpression, however, the node reported here will be a MemberExpression, which does not include the params and parens.
            node = node.parent;

            // This will return the variable name or quoted literal depending on which is provided.
            let entityName = context.getSourceCode().getText(node.arguments[0]);

            let suggest = [{
                desc: "Replace with getEntityMetadata async template",
                fix: function (fixer) {
                    return fixer.replaceText(node, `Xrm.Utility.getEntityMetadata(${entityName}).then(\n\t\t// TODO: this is just a sample that will need to be adjusted\n\t\tfunction success(result) {\n\t\t\t// Handle success\n\t\t\tif (result.IsActivity) {\n\t\t\t\t// Handle when an activity\n\t\t\t}\n\t\t\telse (result.IsActivity) {\n\t\t\t\t// Handle when not an activity\n\t\t\t}\n\t\t},\n\t\tfunction (error) {\n\t\t\t// Handle error conditions\n\t\t}\n\t)`);
                }
            }];

            ruleUtils.reportAccordingly(context, node, data.messageId, undefined, snippet, undefined, suggest);
        };

        let ruleLogic = new noRestrictedProperties(context, optionsOverride, reporter);

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return {
            VariableDeclarator: function (node) { ruleLogic.processVariableDeclarator(node, context) },
            MemberExpression: function (node) { ruleLogic.processMemberExpression(node, context) }
        };
    }
};
