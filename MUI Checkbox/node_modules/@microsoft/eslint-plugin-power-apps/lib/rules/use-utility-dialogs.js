// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const MESSAGE_ID = "message1";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        hasSuggestions: true,

        type: "suggestion",

        docs: {
            description: "Use Web API dialogs in form and ribbon commands",
            category: "warning",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/use-utility-dialogs"
        },

        messages: {
            [MESSAGE_ID]: "A call to '{{ arg0 }}' is being made within the context of a form. It is preferred to use the provided API '{{ arg1 }}' on forms to ensure cross-device and platform compatibility.",
        },

        schema: [
            {
                "type": "object",
                "properties": {
                    "requireXrm": {
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            }
        ]
    },

    create(context) {

        const tracker = new ruleUtils.usageTracker();
        const sourceCode = context.getSourceCode();

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return {
            Identifier(node) {
                tracker.trackSdkUsage(node, sourceCode);
            },
            MemberExpression(node) {
                tracker.trackSdkUsage(node, sourceCode);
            },
            "CallExpression:exit"(node) {
                if (tracker.hasCrmFormSdkUsage || tracker.hasCrmInternalUsage || tracker.hasXrmSdkUsage || (context.options[0] && context.options[0].requireXrm === false)) {                    
                    if (tracker.isGlobalCall(node.callee)) {
                        const call = node.callee.type === "MemberExpression" ?
                            node.callee.property :
                            node.callee;
                        
                        if (call.name === "alert" || call.name === "confirm") {
                            let isAlert = call.name === "alert";
                            let snippet = sourceCode.getText(node);
                            let suggest = undefined;

                            // Get the message parameter.
                            let args = node.arguments;

                            if (isAlert) {
                                suggest = [{
                                    desc: "Replace with Xrm.Navigation.openAlertDialog template",
                                    fix: function (fixer) {
                                        let successHandlerSnippet = "function success(result) {\n\t\t// logic on success\n\t}";
                                        let replacementSnippet = `Xrm.Navigation.openAlertDialog({ text: ${sourceCode.getText(args[0])} }, { height: 120, width: 260 }).then(\n\t${successHandlerSnippet},\n\tfunction (error) {\n\t\t// logic on error\n\t}\n)`;

                                        return fixer.replaceText(node, replacementSnippet);
                                    }
                                }];
                            }
                            // It's a confirm
                            else {
                                suggest = [{
                                    desc: "Replace with Xrm.Navigation.openConfirmDialog template",
                                    fix: function (fixer) {
                                        let successHandlerSnippet = "function success(result) {\n\t\tif (result.confirmed) {\n\t\t\t// logic on using OK button\n\t\t}\n\t\telse {\n\t\t\t// logic on using Cancel button or X\n\t\t}\n\t}";
                                        let replacementSnippet = `Xrm.Navigation.openConfirmDialog({ text: ${sourceCode.getText(args[0])} }, { height: 120, width: 260 }).then(\n\t${successHandlerSnippet},\n\tfunction (error) {\n\t\t// logic on error\n\t}\n)`;

                                        return fixer.replaceText(node, replacementSnippet);
                                    }
                                }];
                            }

                            ruleUtils.reportAccordingly(
                                context,
                                call,
                                MESSAGE_ID,
                                [call.name, isAlert ? "Xrm.Navigation.openAlertDialog" : "Xrm.Navigation.openConfirmDialog"],
                                snippet,
                                undefined,
                                suggest
                            );
                        }
                    }
                }
            }
        };
    }
};
