// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const DEPRECATED_ENDPOINT = "/xrmservices/2011/organizationdata.svc";
const WEB_API_DATA_ENDPOINT = "/api/data/";
const MESSAGE_ID = "message2";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "problem",

        docs: {
            description: "Do not target the Microsoft Dynamics CRM 2011 OData 2.0 endpoint",
            category: "Upgrade Readiness",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/avoid-crm2011-service-odata"
        },

        messages: {
            [MESSAGE_ID]: "The URL '{{ arg0 }}' targets the deprecated Dynamics CRM 2011 OData 2.0 endpoint. The Dynamics CRM 2011 OData 2.0 endpoint was deprecated in Dynamics CRM 2016 (v8.0) and will soon be considered unsupported. Replace with the new Web API endpoint '{{ arg1 }}/[version]' which implements OData 4.0 messaging protocol."
        }
    },

    create(context) {

        const sourceCode = context.getSourceCode();

        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------

        /**
         * Process a string node to determine if it needs to be reported.
         *
         * @param {ASTNode} stringNode The string node to process.
         * @returns {void}
         */
        function processString(stringNode) {

            // Value string will be "quoted" or 'aposed'.
            const urlVal = ruleUtils.stringTrimAny(stringNode.value, ["\"", "'"]);

            if (urlVal.toLocaleLowerCase().indexOf(DEPRECATED_ENDPOINT) > -1) {

                ruleUtils.reportAccordingly(
                    context,
                    stringNode,
                    MESSAGE_ID,
                    [urlVal, WEB_API_DATA_ENDPOINT],
                    urlVal);

            }
        }

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return {
            Program() {
                const stringNodes = ruleUtils.getAllStrings(sourceCode);

                stringNodes.forEach(processString);
            }
        };
    }
};
