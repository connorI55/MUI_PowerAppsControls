// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const TARGET_FUNCTION = "getData";
const REPLACEMENT = "data";
const MESSAGE_ID = "message2";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        hasSuggestions: true,

        type: "problem",

        docs: {
            description: "Use the grid APIs",
            category: "Upgrade Readiness",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/use-grid-api"
        },

        messages: {
            [MESSAGE_ID]: "'{{ arg0 }}' uses a deprecated API in the grid object model. Replace this call with the 'data' property of the grid row object."
        }
    },

    create(context) {

        const sourceCode = context.getSourceCode();
        const trackedObjects = {};

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return {
            ForInStatement(node) {
                if (trackedObjects[node.right.name] === "gridRowList") {
                    trackedObjects[node.left.name] = "gridRow";
                }
            },
            CallExpression(node) {
                if (node.callee.type === "MemberExpression" && node.callee.property.name === "forEach") {
                    const objName = node.callee.object.name;

                    if (trackedObjects[objName] === "gridRowList") {
                        if (node.arguments && node.arguments.length > 0) {
                            const func = node.arguments[0];

                            if (func.type === "FunctionExpression" && func.params && func.params.length > 0) {
                                const arg = func.params[0];

                                if (arg.type === "Identifier") {
                                    trackedObjects[arg.name] = "gridRow";
                                }
                            }
                        }
                    }
                }
            },
            AssignmentExpression(node) {
                if (node.left.type === "Identifier" && node.right.type === "Identifier") {
                    if (trackedObjects[node.right.name]) {
                        trackedObjects[node.left.name] = "grid";
                    }
                }
            },
            VariableDeclarator(node) {
                if (node.init) {
                    switch (node.init.type) {
                    case "CallExpression": {
                        const callee = node.init.callee;

                        if (callee.type === "Identifier" && node.init.callee.name === "getGrid") {
                            trackedObjects[node.id.name] = "grid";
                        } else if (callee.property) {
                            switch (callee.property.name) {
                                case "getRows":
                                case "getSelectedRows":
                                    if (callee.object.type === "CallExpression"
                                        && callee.object.callee.name === "getGrid") {
                                        trackedObjects[node.id.name] = "gridRowList";
                                    } else {
                                        const rootObject = ruleUtils.getRootObjectName(callee);

                                        if (trackedObjects[rootObject] === "grid") {
                                            trackedObjects[node.id.name] = "gridRowList";
                                        }
                                    }
                                    break;
                                case "get":
                                    if (callee.object.type === "CallExpression"
                                        && (callee.object.callee.name === "getRows" || callee.object.callee.name === "getSelectedRows")) {
                                        trackedObjects[node.id.name] = "gridRow";
                                    } else {
                                        const rootObject = ruleUtils.getRootObjectName(callee);
                                        if (trackedObjects[rootObject] === "gridRowList") {
                                            trackedObjects[node.id.name] = "gridRow";
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                    }
                    case "MemberExpression":
                        if (node.init.property.type === "Literal" && trackedObjects[node.init.object.name] ==="gridRowList") {
                            trackedObjects[node.id.name] = "gridRow";
                        }
                        break;
                    }
                }
            },
            "CallExpression:exit"(node) {
                const callee = node.callee;

                if (callee.type === "MemberExpression" && callee.property && callee.property.name === TARGET_FUNCTION) {
                    let object = callee.object;

                    switch (object.type) {
                    case "CallExpression": {
                        const callee = object.callee;

                        if (callee.property.name === "get") {
                            object = callee.object;

                            switch (object.type) {
                            case "Identifier":
                                if (trackedObjects[object.name] === "gridRowList") {
                                    let snippet = sourceCode.getText(node);

                                    ruleUtils.reportAccordingly(
                                        context, 
                                        node,
                                        MESSAGE_ID,
                                        [snippet],
                                        snippet,
                                        undefined,
                                        [{
                                            desc: "Replace getData() with the data property",
                                            fix: function(fixer) {
                                                let newSnippet = snippet.replace(`${TARGET_FUNCTION}()`, REPLACEMENT)
                                                return fixer.replaceText(node, newSnippet);
                                            }
                                        }]);
                                }
                                break;
                            case "CallExpression":
                                if (object.callee.property.name === "getRows" || object.callee.property.name === "getSelectedRows") {
                                    object = object.callee.object;

                                    let snippet = sourceCode.getText(node);

                                    ruleUtils.reportAccordingly(
                                        context, 
                                        node,
                                        MESSAGE_ID,
                                        [snippet],
                                        snippet,
                                        undefined,
                                        [{
                                            desc: "Replace getData() with the data property",
                                            fix: function(fixer) {
                                                let newSnippet = snippet.replace(`${TARGET_FUNCTION}()`, REPLACEMENT)
                                                return fixer.replaceText(node, newSnippet);
                                            }
                                        }]);
                                }
                                break;
                            }
                        }
                        break;
                    }
                    case "Identifier":
                        if (trackedObjects[object.name] === "gridRow") {
                            let snippet = sourceCode.getText(node);

                            ruleUtils.reportAccordingly(
                                context, 
                                node,
                                MESSAGE_ID,
                                [snippet],
                                snippet,
                                undefined,
                                [{
                                    desc: "Replace getData() with the data property",
                                    fix: function(fixer) {
                                        let newSnippet = snippet.replace(`${TARGET_FUNCTION}()`, REPLACEMENT)
                                        return fixer.replaceText(node, newSnippet);
                                    }
                                }]);
                            }
                        break;
                    case "MemberExpression":
                        if (object.property.type === "Literal" || object.property.type === "Identifier") {
                            if (trackedObjects[object.object.name] === "gridRowList") {
                                let snippet = sourceCode.getText(node);

                                ruleUtils.reportAccordingly(
                                    context, 
                                    node,
                                    MESSAGE_ID,
                                    [snippet],
                                    snippet,
                                    undefined,
                                    [{
                                        desc: "Replace getData() with the data property",
                                        fix: function(fixer) {
                                            let newSnippet = snippet.replace(`${TARGET_FUNCTION}()`, REPLACEMENT)
                                            return fixer.replaceText(node, newSnippet);
                                        }
                                    }]);
                            }
                        }
                        break;
                    }
                }
            }
        };
    }
};
