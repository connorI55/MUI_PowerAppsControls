// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");
const noRestrictedProperties = require("../utils/restricted-property");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const MESSAGE_ID = "message2";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        hasSuggestions: true,

        type: "problem",

        docs: {
            description: "Use WebApi offline",
            category: "Upgrade Readines",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/use-offline"
        },

        fixable: "code",

        messages: {
            [MESSAGE_ID]: "'{{ arg0 }}' uses the legacy namespace of Xrm.Mobile.offline. This has been replaced with Xrm.WebApi.offline."
        }
    },

    create(context) {

        let optionsOverride = [
            {
                object: "Xrm.Mobile",
                property: "offline",
                messageId: MESSAGE_ID,
                disallowParent: true
            }
        ];

        const reporter = function (context, node, isMatchedProperty, data, snippet) {
            let suggest = [{
                desc: "Replace with Xrm.WebApi.offline",
                fix: function (fixer) {

                    let nodeText = context.getSourceCode().getText(node);
                    nodeText = nodeText.replace("Xrm.Mobile.offline", "Xrm.WebApi.offline");

                    return fixer.replaceText(node, nodeText);
                }
            }];
            ruleUtils.reportAccordingly(context, node, data.messageId, [context.getSourceCode().getText(node.parent)], snippet, undefined, suggest);
        };

        let ruleLogic = new noRestrictedProperties(context, optionsOverride, reporter);

        return {            
            VariableDeclarator: function (node) { ruleLogic.processVariableDeclarator(node, context) },
            MemberExpression: function (node) { ruleLogic.processMemberExpression(node, context) }
        };
    }
};
