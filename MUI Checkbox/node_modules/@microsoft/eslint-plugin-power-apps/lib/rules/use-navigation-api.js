// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");
const noRestrictedProperties = require("../utils/restricted-property");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const MESSAGE_ID = "message1";
const MESSAGE_ID_2 = "message2";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        hasSuggestions: true,
        type: "problem",
        docs: {
            description: "Use the navigation APIs",
            category: "Upgrade Readiness",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/use-navigation-api"
        },
        messages: {
            [MESSAGE_ID]: "'{{ arg0 }}' uses a deprecated API in the client object model. Replace this call with the following client object model API: '{{ arg1 }}.'",
            [MESSAGE_ID_2]: "'{{ arg0 }}' uses an unpublished API in the client object model. Replace this call with the following supported client object model API: '{{ arg1 }}.'"
        }
    },

    create(context) {

        let optionsOverride = [
            {
                object: "Xrm.Utility",
                property: "alertDialog",
                messageId: MESSAGE_ID,
                disallowParent: true
            },
            {
                object: "Xrm.Utility",
                property: "confirmDialog",
                messageId: MESSAGE_ID,
                disallowParent: true
            },
            {
                object: "Xrm.Utility",
                property: "openEntityForm",
                messageId: MESSAGE_ID,
                disallowParent: true
            },
            {
                object: "Xrm.Utility",
                property: "openQuickCreate",
                messageId: MESSAGE_ID,
                disallowParent: true
            },
            {
                object: "Xrm.Utility",
                property: "openWebResource",
                messageId: MESSAGE_ID,
                disallowParent: true
            },
            {
                object: "Xrm.Navigation",
                property: "openDialog",
                messageId: MESSAGE_ID_2,
                disallowParent: true
            }
        ];

        const reporter = function (context, node, isMatchedProperty, data, snippet) {
            let suggest = undefined;
            let dataParam = undefined;
            let sourceCode = context.getSourceCode();
            // Each of these is a CallExpression, however, the node reported here will be a MemberExpression, which does not include the params and parens.
            node = node.parent;
            let expressionText = sourceCode.getText(node);

            // Get the message parameter.
            let args = node.arguments;

            if (expressionText.includes(".alertDialog(")) {
                dataParam = [expressionText, "Xrm.Navigation.openAlertDialog"];

                suggest = [{
                    desc: "Replace with Xrm.Navigation.openAlertDialog template",
                    fix: function (fixer) {
                        // There may not be a success handler param so handle if it does and does not exist.
                        let successHandlerSnippet = args.length === 1
                            ? "function success(result) {\n\t\t// logic on success\n}"
                            : sourceCode.getText(args[1]);

                        let replacementSnippet = `Xrm.Navigation.openAlertDialog({ text: ${sourceCode.getText(args[0])} }, { height: 120, width: 260 }).then(\n\t${successHandlerSnippet},\n\tfunction (error) {\n\t\t// logic on error\n\t}\n);`;

                        return fixer.replaceText(node, replacementSnippet);
                    }
                }];
            }
            else if (expressionText.includes(".confirmDialog(")) {
                dataParam = [expressionText, "Xrm.Navigation.openConfirmDialog"];

                suggest = [{
                    desc: "Replace with Xrm.Navigation.openConfirmDialog template",
                    fix: function (fixer) {
                        // There could be 3 args with the 2nd being an okay button handler and the 3rd being a close handler.
                        // Ignoring these at this time due to complexity.
                        let successHandlerSnippet = "function success(result) {\n\t\tif (result.confirmed) {\n\t\t\t// logic on using OK button\n\t\t}\n\t\telse {\n\t\t\t// logic on using Cancel button or X\n\t\t}\n\t}";

                        let replacementSnippet = `Xrm.Navigation.openConfirmDialog({ text: ${sourceCode.getText(args[0])} }, { height: 120, width: 260 }).then(\n\t${successHandlerSnippet},\n\tfunction (error) {\n\t\t// logic on error\n\t}\n);`;

                        return fixer.replaceText(node, replacementSnippet);
                    }
                }];
            }
            else if (expressionText.includes(".openDialog(")) {
                dataParam = [expressionText, "Xrm.Navigation.navigateTo"];

                suggest = [{
                    desc: "Replace with Xrm.Navigation.navigateTo template",
                    fix: function (fixer) {
                        let replacementSnippet = 'Xrm.Navigation.navigateTo({ pageType: "webresource", webresourceName: "new_sample_webresource" }, { target: 2, height: 400, width: 300, position: 1 }).then(\n\tfunction success() {\n\t\t// Handle dialog closed\n\t},\n\tfunction error() {\n\t\t// logic on error\n\t}\n);';

                        return fixer.replaceText(node, replacementSnippet);
                    }
                }];
            }
            else if (expressionText.includes(".openEntityForm(")) {
                dataParam = [expressionText, "Xrm.Navigation.openForm"];
            }
            else if (expressionText.includes(".openQuickCreate(")) {
                dataParam = [expressionText, "Xrm.Navigation.openForm"];
            }
            else if (expressionText.includes(".openWebResource(")) {
                dataParam = [expressionText, "Xrm.Navigation.openWebResource"];
            }

            ruleUtils.reportAccordingly(context, node, data.messageId, dataParam, snippet, undefined, suggest);
        };

        let ruleLogic = new noRestrictedProperties(context, optionsOverride, reporter);

        return {
            VariableDeclarator: function (node) { ruleLogic.processVariableDeclarator(node, context) },
            MemberExpression: function (node) { ruleLogic.processMemberExpression(node, context) }
        }
    }
}