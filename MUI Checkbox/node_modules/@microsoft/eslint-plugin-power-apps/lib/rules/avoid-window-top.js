// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const TARGET_MEMBERS = [
    "window.top",
    "window.parent.parent"
];
const MESSAGE_ID = "message2";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "problem",

        docs: {
            description: "Avoid using window.top",
            category: "Supportability",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/avoid-window-top"
        },

        messages: {
            [MESSAGE_ID]: "{{ arg0 }} references 'window.top' or 'window.parent.parent'. This will likely result in cross-origin security errors when hosted outside of the primary web client. Develop an alternate approach."
        }
    },

    create(context) {

        const sourceCode = context.getSourceCode();
        const memberVariables = {};

        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------

        function dereferenceMember(node) {
            let result = "";
            let objectName;

            if (typeof node === "string") {
                objectName = node.substr(0, node.indexOf("."));
                result = node;
            } else if (node.type === "MemberExpression" || node.type === "Identifier") {
                objectName = node.object ? node.object.name : node.name;
                result = sourceCode.getText(node);
            }

            if (objectName) {

                const value = memberVariables[objectName];

                if (value) {
                    result = value + result.substring(objectName.length);
                }
            }

            return result;
        }

        function isTargetNamespace(name) {
            for (var i = 0; i < TARGET_MEMBERS.length; i++) {
                if (TARGET_MEMBERS[i].startsWith(name + ".")) {
                    return true;
                }
            }

            return false;
        }

        function evaluateExpressionOperands(left, right) {
            let resolvedName;

            if (right) {
                // Check for jQuery, e.g. var top = $(window.top);
                if (right.type === "CallExpression") {
                    if (right.callee.type === "Identifier" && right.callee.name === "$" && right.arguments.length > 0) {
                        right = right.arguments[0];
                    }
                }

                resolvedName = right.type === "Identifier" ?
                    dereferenceMember(right) :
                    sourceCode.getText(right);

                if (TARGET_MEMBERS.includes(resolvedName)) {
                    let snippet = sourceCode.getText(right.parent);
                    ruleUtils.reportAccordingly(
                        context,
                        right,
                        MESSAGE_ID,
                        [snippet],
                        snippet);

                    if (left && left.type === "Identifier") {
                        memberVariables[left.name] = resolvedName;
                    }
                }
                else if (isTargetNamespace(resolvedName)) {
                    if (left && left.type === "Identifier") {
                        memberVariables[left.name] = resolvedName;
                    }
                }
            }

            if (left && left.type === "MemberExpression") {
                resolvedName = dereferenceMember(left);

                if (TARGET_MEMBERS.includes(resolvedName)) {
                    let snippet = sourceCode.getText(left.parent);

                    ruleUtils.reportAccordingly(
                        context,
                        left,
                        MESSAGE_ID,
                        [snippet],
                        snippet);
                }
            }
        }

        return {
            VariableDeclarator(node) {
                evaluateExpressionOperands(node.id, node.init);
            },
            ExpressionStatement(node) {
                let snippet = sourceCode.getText(node.expression);
                let resolvedName = dereferenceMember(snippet);

                if (TARGET_MEMBERS.includes(resolvedName)) {

                    ruleUtils.reportAccordingly(
                        context,
                        node,
                        MESSAGE_ID,
                        [snippet],
                        snippet);
                }
            },
            MemberExpression(node) {
                // Detect member usage of window.top
                if (node.object.name === 'window' && node.property.name === 'top') {
                    let snippet = sourceCode.getText(node);
                    ruleUtils.reportAccordingly(
                        context,
                        node,
                        MESSAGE_ID,
                        [snippet],
                        snippet);                
                }

                // Detect member usage of window.parent.parent
                if (node.object.object && node.object.object.name === 'window' && node.object.property.name === 'parent' && node.property.name === 'parent') {
                    let snippet = sourceCode.getText(node);
                    ruleUtils.reportAccordingly(
                        context,
                        node,
                        MESSAGE_ID,
                        [snippet],
                        snippet);                
                }
            },
            CallExpression(node) {
                // Check for a jQuery-rooted expression, e.g. $(window.top).func();
                if (node.callee.name === "$" && node.parent.property && node.arguments.length > 0) {
                    evaluateExpressionOperands(node.arguments[0], null);
                }
            },
            AssignmentExpression(node) {
                evaluateExpressionOperands(node.left, node.right);
            },
            BinaryExpression(node) {
                evaluateExpressionOperands(node.left, node.right);
            }
        };
    }
};
