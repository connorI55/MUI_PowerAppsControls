// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");
const noRestrictedProperties = require("../utils/restricted-property");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------
const MESSAGE_ID_AUTOSAVED = "message1";
const MESSAGE_ID_LCID = "message2";
const MESSAGE_ID_UNIQUENAME = "message3";

module.exports =
{
    meta: {
        hasSuggestions: true,
        type: "problem",
        docs: {
            description: "Use org settings",
            category: "Upgrade Readiness",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/use-org-setting"
        },
        messages: {
            [MESSAGE_ID_AUTOSAVED]: "'Xrm.Page.context.getIsAutoSaveEnabled()' is a deprecated API. Replace this call with 'Xrm.Utility.getGlobalContext().organizationSettings.isAutoSaveEnabled'",
            [MESSAGE_ID_LCID]: "'Xrm.Page.context.getOrgLcid()' is a deprecated API. Replace this call with 'Xrm.Utility.getGlobalContext().organizationSettings.languageId'",
            [MESSAGE_ID_UNIQUENAME]: "'Xrm.Page.context.getOrgUniqueName()' is a deprecated API. Replace this call with 'Xrm.Utility.getGlobalContext().organizationSettings.uniqueName'"
        }
    },
    create(context) {

        let optionsOverride = [
            {
                object: "Xrm.Page.context",
                property: "getIsAutoSaveEnabled",
                messageId: MESSAGE_ID_AUTOSAVED,
                disallowParent: true
            },
            {
                object: "Xrm.Page.context",
                property: "getOrgLcid",
                messageId: MESSAGE_ID_LCID,
                disallowParent: true
            },
            {
                object: "Xrm.Page.context",
                property: "getOrgUniqueName",
                messageId: MESSAGE_ID_UNIQUENAME,
                disallowParent: true
            }
        ];

        const reporter = function (context, node, isMatchedProperty, data, snippet) {
            let suggest = undefined;

            // Each of these is a CallExpression, however, the node reported here will be a MemberExpression, which does not include the params and parens.
            node = node.parent;

            switch (data.messageId) {

                case MESSAGE_ID_AUTOSAVED:
                    suggest = [{
                        desc: "Replace with organizationSettings.isAutoSaveEnabled",
                        fix: function (fixer) {
                            return fixer.replaceText(node, "Xrm.Utility.getGlobalContext().organizationSettings.isAutoSaveEnabled");
                        }
                    }];
                    break;

                case MESSAGE_ID_LCID:
                    suggest = [{
                        desc: "Replace with organizationSettings.languageId",
                        fix: function (fixer) {
                            return fixer.replaceText(node, "Xrm.Utility.getGlobalContext().organizationSettings.languageId");
                        }
                    }];
                    break;

                case MESSAGE_ID_UNIQUENAME:
                    suggest = [{
                        desc: "Replace with organizationSettings.uniqueName",
                        fix: function (fixer) {
                            return fixer.replaceText(node, "Xrm.Utility.getGlobalContext().organizationSettings.uniqueName");
                        }
                    }];
                    break;
            }

            ruleUtils.reportAccordingly(context, node, data.messageId, undefined, snippet, undefined, suggest);
        };

        let ruleLogic = new noRestrictedProperties(context, optionsOverride, reporter);

        return {
            VariableDeclarator: function (node) { ruleLogic.processVariableDeclarator(node, context) },
            MemberExpression: function (node) { ruleLogic.processMemberExpression(node, context) }
        }
    }
}

