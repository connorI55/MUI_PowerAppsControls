// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const TARGET_ROOT = "/webresources/";
const INVALID_ROOT_MESSAGE = "message1";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "problem",

        docs: {
            description: "Web resource URL is invalid",
            category: "Performance",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/use-cached-webresource"
        },

        messages: {
            [INVALID_ROOT_MESSAGE]: "The relative or absolute URL '{{ arg0 }}' retrieves a web resource from the server rather than from the cache. Web resource URL's should always be relative to ensure caching support.  Additionally, do not include '/WebResources/' within the URL path as it will refer to the caller's default organization."
        }
    },

    create(context) {

        const sourceCode = context.getSourceCode();

        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------

        /**
         * Process a string node to determine if it needs to be reported.
         *
         * @param {ASTNode} stringNode The string node to process.
         * @returns {void}
         */
        function processString(stringNode) {

            const urlVal = ruleUtils.stringTrimAny(stringNode.value, ["\""]); // Value string will be "quoted".
            if (urlVal.toLocaleLowerCase().indexOf(TARGET_ROOT) > -1) {

                ruleUtils.reportAccordingly(
                    context,
                    stringNode,
                    INVALID_ROOT_MESSAGE,
                    [urlVal],
                    urlVal
                );
                
                return;
            }
        }

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return {
            Program() {
                const stringNodes = ruleUtils.getAllStrings(sourceCode);

                stringNodes.forEach(processString);
            }
        };
    }
};
