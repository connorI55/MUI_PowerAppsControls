// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");
const noRestrictedProperties = require("../utils/restricted-property");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------
const MESSAGE_ID = "message1";

module.exports =
{
    meta: {
        hasSuggestions: true,
        type: "problem",
        docs: {
            description: "Use global context",
            category: "Upgrade Readiness",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/use-global-context"
        },
        messages: {
            [MESSAGE_ID]: "'Xrm.Page.context' usage was detected. For access to the global context use 'Xrm.Utility.getGlobalContext'."
        }
    },
    create(context) {

        let optionsOverride = [
            {
                object: "Xrm.Page",
                property: "context",
                messageId: MESSAGE_ID,
                disallowParent: true
            }
        ];

        const reporter = function (context, node, isMatchedProperty, data, snippet) {
            var suggest = 
                [{
                    desc: "Replace with Xrm.Utility.getGlobalContext",
                    fix: function(fixer) {
                        // Replace Xrm.Page.context                        
                        return fixer.replaceText(node, "Xrm.Utility.getGlobalContext()");
                    }
                }];

            ruleUtils.reportAccordingly(context, node, data.messageId, undefined, snippet, undefined, suggest);
        };

        let ruleLogic = new noRestrictedProperties(context, optionsOverride, reporter);

        return {
            VariableDeclarator: function (node) { ruleLogic.processVariableDeclarator(node, context) },
            MemberExpression: function (node) { ruleLogic.processMemberExpression(node, context) }
        }
    }
}