// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const LEGACY_APIS = [
    "XMLHTTP",
    "XMLDOM",
    "DOMDocument"
];
const ALTERNATIVES = [
    "new window.XMLHttpRequest",
    "Document Object Model (DOM)",
    "Document Object Model (DOM)"
];
const MESSAGE_ID_KNOWN = "message1";
const MESSAGE_ID_UNKNOWN = "message2";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        hasSuggestions: true,

        type: "problem",

        docs: {
            description: "Avoid using Internet Explorer legacy APIs or browser plug-ins",
            category: "Upgrade Readiness",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/avoid-browser-specific-api"
        },

        messages: {
            [MESSAGE_ID_KNOWN]: "'{{ arg0 }}' references or accesses a legacy Internet Explorer (IE) feature that is not cross-browser compatible. The platform supports modern browsers. To ensure broad browser support, remove or add feature detection and the following alternate browser feature: '{{ arg1 }}'.",
            [MESSAGE_ID_UNKNOWN]: "'{{ arg0 }}' references or accesses a legacy Internet Explorer (IE) feature that is not cross-browser compatible. The platform supports modern browsers. To ensure broad browser support, remove or add feature detection and the appropriate alternate browser feature."
        }
    },

    create(context) {

        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------

        const sourceCode = context.getSourceCode();

        function reportActiveXObjectIssue(newExpr) {

            // There will be an argument
            if (newExpr.arguments.length > 0) {

                const expressionText = sourceCode.getText(newExpr);

                // Handle when it is text ("Literal") and when it is a variable ("Identifier").
                // Test for Literal to handle if it is not an Identifier as well.
                if (newExpr.arguments[0].type === "Literal") {

                    const comObjectName = newExpr.arguments[0].value;
                    const compareValue = comObjectName.toLowerCase();

                    // Look for patterns that have known replacements, such as XML DOM usage, and provide a specific advisory message.
                    for (let i = 0; i < LEGACY_APIS.length; i++) {

                        const term = LEGACY_APIS[i];
                        if (compareValue.includes(term.toLowerCase())) {
                            let suggest = undefined;

                            if (compareValue.includes("xmlhttp")) {
                                suggest = [{
                                    desc: "Replace with XMLHttpRequest",
                                    fix: function (fixer) {
                                        return fixer.replaceText(newExpr, "new window.XMLHttpRequest()");
                                    }
                                }];
                            }

                            ruleUtils.reportAccordingly(
                                context,
                                newExpr,
                                MESSAGE_ID_KNOWN,
                                [expressionText, ALTERNATIVES[i]],
                                expressionText,
                                undefined,
                                suggest);

                            // Found it so stop looking since we won't find more than one.
                            return;

                        }                        
                    }
                }

                // This is an unknown scenario so include a generic message.
                ruleUtils.reportAccordingly(
                    context,
                    newExpr,
                    MESSAGE_ID_UNKNOWN,
                    [expressionText],
                    expressionText);
            }
        }

        function evaluateExpression(node) {

            const callee = node.callee;

            if (callee) {
                switch (callee.name) {
                    case "ActiveXObject":
                        reportActiveXObjectIssue(node);
                        break;
                }
            }
        }

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return {
            NewExpression: evaluateExpression
        };
    }
};
