// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const GLOBAL_DOM_FUNCTIONS = [
    "window.$",
    "window.$get",
    "window.$find"
];

const DOCUMENT_OBJECT_PROPERTIES = [
    "all",
    "activeElement",
    "alinkColor",
    "anchors",
    "applets",
    "async",
    "bgColor",
    "body",
    "characterSet",
    "compatible", // IE
    "compatMode",
    "cookie",
    "contentType",
    "defaultView",
    "designMode",
    "doctype",
    "documentElement",
    "documentMode",
    "documentURI",
    "documentURIObject", // FF
    "domConfig",
    "domain",
    "embeds",
    "fgColor",
    "forms",
    "fullscreenElement", // EDGE+
    "fullscreenEnabled", // EDGE+
    "head",
    "height",
    "images",
    "implementation",
    "inputEncoding",
    "lastModified",
    "lastStyleSheetSet",
    "linkColor",
    "links",
    "location",
    "msFullscreenElement", // IE11
    "msFullScreenEnabled", // IE11
    "mozFullScreen", // FF
    "mozFullScreenElement", // FF
    "mozFullScreenEnabled", // FF
    "mozSyntheticDocument", // FF
    "origin",
    "plugins",
    "pointerLockElement",
    "popupNode", // deprecated
    "preferredStyleSheetSet",
    "protocol", // IE
    "readyState",
    "referrer",
    "scripts",
    "scrollingElement",
    "styleSheets",
    "styleSheetSets",
    "timeline",
    "tooltipNode",
    "URL",
    "visibilityState",
    "vlinkColor",
    "width"
];

const ELEMENT_OBJECT_PROPERTIES = [
    "attributes",
    "childElementCount", // ParentNode
    "childNodes", // ParentNode
    "children", // ParentNode
    "dir",
    "firstChild", // ParentNode
    "firstElementChild", // ParentNode
    "hidden",
    "lastChild", // ParentNode
    "lastElementChild", // ParentNode
    "namespaceURI",
    "ownerDocument",
    "parentWindow",
    "textContent",
    "title"
];

const DOCUMENT_OBJECT_FUNCTIONS = [
    "adoptNode",
    "caretPositionFromPoint",
    "careRangeFromPoint",
    "clear",
    "close", // Avoid Xrm.Page.ui.close()
    "createAttribute",
    "createCDATASection",
    "createComment",
    "createDocumentFragment",
    "createElement",
    "createEntityReference",
    "createEvent",
    "createExpression",
    "createNodeIterator",
    "createProcessingInstruction",
    "createRange",
    "createTextNode",
    "elementFromPoint",
    "enableStyleSheetsForSet",
    "evaluate",
    "execCommand",
    "exitPointerLock",
    "getElementById",
    "getElementsByName",
    "getSelection",
    "hasFocus",
    "importNode",
    "loadOverlay",
    "mozCancelFullScreen", // FF
    "mozSetImageElement", // FF
    "normalizeDocument", // IE
    "open", // needs to be explicit call (not XmlHttpRequest.open, window.open)
    "queryCommandEnabled",
    "queryCommandSupported",
    "registerElement",
    "releaseCapture",
    "write",
    "writeln"
];

const ELEMENT_OBJECT_FUNCTIONS = [
    "appendChild",
    "cloneNode",
    "compareDocumentPosition",
    "focus",
    "getElementsByClassName",
    "getElementsByTagName",
    "hasAttribute",
    "hasAttributes",
    "hasChildNodes",
    "hasOwnProperty",
    "insertBefore",
    "isDefaultNamespace",
    "isEqualNode",
    "isSameNode",
    "isSupported",
    "lookupNamespaceURI",
    "lookupPrefix",
    "normalize",
    "querySelector",
    "querySelectorAll",
    "removeChild",
    "removeNode",
    "replaceChild",
];

const MESSAGE_ID = "message1";
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "problem",

        docs: {
            description: "Do not directly access the HTML Document Object Model (DOM) on application pages or forms",
            category: "error",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/avoid-dom-form"
        },

        messages: {
            [MESSAGE_ID]: "'{{ arg0 }}' accesses the document object model (DOM) managed by a model-driven app directly. This technique is unsupported in all versions of Dynamics 365 and PowerApps.  Remove or replace with a supported Client API Object Model."
        },

        schema: [
            {
                "type": "object",
                "properties": {
                    "requireXrm": {
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            }
        ]
    },

    create(context) {

        const tracker = new ruleUtils.usageTracker();
        const sourceCode = context.getSourceCode();
        const documentMemberNodes = [];
        const unsupportedExpressionNodes = [];

        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------

        function tryReportMemberExpression(node, messageId) {
            const object = node.object.type === "Identifier" ? node.object : node.object.property;  

            if (object && (object.name === "document" || tracker.documentObjectRefs[object.name])) {
                let snippet = sourceCode.getText(node);

                ruleUtils.reportAccordingly(
                    context,
                    node.property,
                    MESSAGE_ID,
                    [snippet],
                    snippet
                )
            }
        }

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return {
            VariableDeclarator(node) {
                if (node.init) {
                    tracker.trackHtmlDomUsage(node.id, node.init);

                    switch (node.init.type) {
                    case "CallExpression": {
                        const object = node.init.callee.type === "Identifier" ?
                            node.init.callee :
                            node.init.callee.object;
                            tracker.trackSdkUsage(object, sourceCode);
                        break;
                    }
                    default:
                        tracker.trackSdkUsage(node.init, sourceCode);
                        break;
                    }
                }
            },
            AssignmentExpression(node) {
                switch (node.right.type) {
                case "Identifier":
                case "MemberExpression":
                    tracker.trackHtmlDomUsage(node.left, node.right);
                    tracker.trackSdkUsage(node.right, sourceCode);
                    break;
                case "CallExpression":
                    tracker.trackHtmlDomUsage(node.left, node.right.callee);
                    tracker.trackSdkUsage(node.right, sourceCode);
                    break;
                }
            },
            CallExpression(node){                
                switch (node.type) {
                    case "CallExpression":
                        tracker.trackSdkUsage(node, sourceCode);
                        break;
                }
            },
            "CallExpression:exit"(node) {
                    let callName;

                    if (node.callee.type === "Identifier") {
                        callName = "window." + node.callee.name;
                    } else if (node.callee.object && node.callee.object.name === "window") {
                        callName = sourceCode.getText(node.callee);
                        node = node.callee.property;
                    } else if (node.callee.property) {
                        callName = node.callee.property.name;
                    }

                    if (GLOBAL_DOM_FUNCTIONS.includes(callName)) {
                        unsupportedExpressionNodes.push(node);
                    } else if (DOCUMENT_OBJECT_FUNCTIONS.includes(callName) || ELEMENT_OBJECT_FUNCTIONS.includes(callName)) {
                        documentMemberNodes.push(node.callee);
                    }                
            },
            "MemberExpression:exit"(node) {
                const objectName = node.property.name;                    

                // Legacy WebClient offers direct usage of contentIFrame0...N as part of overall top-level document structure
                if (objectName && objectName.startsWith("contentIFrame")) {
                    unsupportedExpressionNodes.push(node);
                } else if (DOCUMENT_OBJECT_PROPERTIES.includes(objectName) || ELEMENT_OBJECT_PROPERTIES.includes(objectName)) {
                    documentMemberNodes.push(node);
                }                         
            },
            "Program:exit"(node) {
                if (tracker.hasCrmFormSdkUsage || tracker.hasCrmInternalUsage || tracker.hasXrmSdkUsage || (context.options[0] && context.options[0].requireXrm === false)) {                    
                    if (documentMemberNodes) {
                        for (const documentMember of documentMemberNodes) {
                            tryReportMemberExpression(documentMember);
                        }
                    } 

                    if (unsupportedExpressionNodes) {
                        for (const unsupportedExpression of unsupportedExpressionNodes) {
                            let snippet = sourceCode.getText(unsupportedExpression);
                            ruleUtils.reportAccordingly(
                                context,
                                unsupportedExpression,
                                MESSAGE_ID,
                                [snippet],
                                snippet
                            );
                        }                    
                    }
                }
            }
        }
    }
};
