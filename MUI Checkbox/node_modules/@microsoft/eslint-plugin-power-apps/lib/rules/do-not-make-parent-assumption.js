// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const TARGET_MEMBERS = [
    { "term": "global.parent", "canEnd": false },
    { "term": "window.parent", "canEnd": false },
    { "term": "this.parent", "canEnd": false },
    { "term": "parent", "canEnd": true },
    { "term": "window.opener", "canEnd": false },
    { "term": "opener", "canEnd": true }
];
const PARENT_OR_OPENER_MESSAGE = "message1";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "problem",

        docs: {
            description: "Do not assume that the parent window is the entity form",
            category: "Design",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/do-not-make-parent-assumption"
        },

        messages: {
            [PARENT_OR_OPENER_MESSAGE]: "Usage of '{{ arg0 }}' is being made within the context of an entity form.  Do not assume that the usage of window.parent, window.opener, or this.parent from JavaScript web resources will result in the same context across versions as well as across client types, e.g.-mobile, tablet and browser. Consider a different approach when attempting to interact with one of these contexts."
        }
    },

    create(context) {

        const sourceCode = context.getSourceCode();
        const parentVariables = {};

        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------

        function evaluateExpression(node) {
            const exprText = sourceCode.getText(node);
            const parts = exprText.split(".");
            var memberMatched;

            if (parts[0] in parentVariables) {

                // This uses a variable that makes usage of one of the offenders.
                memberMatched = parentVariables[parts[0]];
            }
            else {

                // Does not use a defined member that matches so look to see if there is direct usage of the offenders.
                memberMatched = TARGET_MEMBERS.find(function (element) {

                    // Without the '.' we were seeing false positives. We want to see an exact match or starting with exact match 
                    // avoiding false positives, such as 'parent.crmForm' and not 'parentNode.childNodes'.
                    if (parts.indexOf("Xrm") === -1 && (exprText.startsWith(element.term + ".") || exprText === element.term)) {

                        return true;
                    }
                    else if (element.canEnd === false && exprText.endsWith("." + element.term)) {

                        return true;
                    }

                    return false;
                });
            }

            if (typeof memberMatched !== 'undefined') {

                ruleUtils.reportAccordingly(
                    context,
                    node,
                    PARENT_OR_OPENER_MESSAGE,
                    Array.of(memberMatched.term),
                    exprText);

                return memberMatched;
            }
            return;
        }

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return {
            VariableDeclarator(node) {
                if (node.init) {
                    // Figure out if there is a match for one of the problem members
                    const memberMatched = evaluateExpression(node.init);

                    if (typeof memberMatched !== 'undefined') {

                        // Capture the returned statement for possible later usage, if found.
                        parentVariables[node.id.name] = memberMatched;
                    }
                }
            },
            ExpressionStatement: evaluateExpression
        };
    }
};
