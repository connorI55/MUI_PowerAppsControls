// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");
const noRestrictedProperties = require("../utils/restricted-property");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------
const MESSAGE_ID = "message2";

module.exports =
{
    meta: {
        hasSuggestions: true,
        type: "suggestion",
        docs: {
            description: "Use client contexts",
            category: "Upgrade Readiness",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/use-client-context"
        },
        messages: {
            [MESSAGE_ID]: "'Xrm.Page' usage was detected. Use of this object as a static access to the primary form context is still supported, however we encourage you to use 'ExecutionContext.getFormContext' instead. Although Xrm.Page is deprecated, parent.Xrm.Page will continue to work in case of HTML web resources embedded in forms as this is the only way to access the form context from the HTML web resource."
        }
    },
    create(context) {

        let optionsOverride = [
            {
                object: "Xrm",
                property: "Page",
                messageId: MESSAGE_ID,
                disallowParent: true
            }
        ];

        const reporter = function (context, node, isMatchedProperty, data, snippet) {
            var suggest =
                [{
                    desc: "Replace with getFormContext",
                    fix: function(fixer) {
                        return fixer.replaceText(node, "ExecutionContext.getFormContext()");
                    }
                }];

            ruleUtils.reportAccordingly(context, node, data.messageId, undefined, snippet, undefined, suggest);
        };

        let ruleLogic = new noRestrictedProperties(context, optionsOverride, reporter);

        return {
            VariableDeclarator: function (node) { ruleLogic.processVariableDeclarator(node, context) },
            MemberExpression: function (node) { ruleLogic.processMemberExpression(node, context) }
        }
    }
}
