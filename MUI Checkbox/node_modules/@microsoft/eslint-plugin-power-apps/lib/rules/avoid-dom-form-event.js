// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const EVENT_HANDLER_FUNCTIONS = [
    "attachEvent",
    "addEventListener",
    "detachEvent",
    "removeEventListener"
];

const JQUERY_EVENT_HANDLER_FUNCTIONS = [
    "window.$.off",
    "window.$.on",
    "window.$.one",
    "window.$.blur",
    "window.$.change",
    "window.$.click",
    "window.$.dblclick",
    "window.$.error",
    "window.$.focus",
    "window.$.focusin",
    "window.$.focusout",
    "window.$.hover",
    "window.$.keyup",
    "window.$.keydown",
    "window.$.keypress",
    "window.$.load",
    "window.$.mousedown",
    "window.$.mouseenter",
    "window.$.mouseleave",
    "window.$.mousemove",
    "window.$.mouseout",
    "window.$.mouseover",
    "window.$.mouseup",
    "window.$.ready",
    "window.$.resize",
    "window.$.scroll",
    "window.$.select",
    "window.$.submit",
    "window.$.toggle",
    "window.$.unload"
    //$.live/die, $.bind/unbind, and $.delegate/undelegate are all deprecated as of v1.7 in favor of $.on/off, therefore we won't check for these
];

const AVAILABLE_EVENTS = [
    "onclick",
    "oncontextmenu",
    "ondblclick",
    "onmousedown",
    "onmouseleave",
    "onmousemove",
    "onmouseover",
    "onmouseout",
    "onmouseup",
    "onkeydown",
    "onkeypress",
    "onkeyup",
    "onabort",
    "onbeforeunload",
    "onerror",
    "onhashchange",
    "onpageshow",
    "onpagehide",
    "onresize",
    "onscroll",
    "onload",
    "onunload",
    "onblur",
    "onchange",
    "onfocus",
    "onfocusin",
    "onfocusout",
    "oninput",
    "oninvalid",
    "onreset",
    "onsearch",
    "onselect",
    "onsubmit",
    "ondrag",
    "ondragend",
    "ondragenter",
    "ondragleave",
    "ondragover",
    "ondragstart",
    "ondrop",
    "oncopy",
    "oncut",
    "onpaste",
    "onafterprint",
    "onbeforeprint"
];

const MESSAGE_ID = "message1";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "problem",

        docs: {
            description: "Do not directly handle HTML Document Object Model (DOM) events on application pages or forms",
            category: "error",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/avoid-dom-form-event",
        },

        messages: {
            [MESSAGE_ID]: "'{{ arg0 }}' registers or unregisters handles to a document object model (DOM) event of a model-driven app. This technique is unsupported in all versions of Dynamics 365 and PowerApps and should be replaced with a supported approach for registering client-side event handlers."
        },

        schema: [
            {
                "type": "object",
                "properties": {
                    "requireXrm": {
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            }
        ]
    },

    create(context) {

        const tracker = new ruleUtils.usageTracker();
        const sourceCode = context.getSourceCode();

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return {
            VariableDeclarator(node) {
                if (node.init) {
                    tracker.trackHtmlDomUsage(node.id, node.init);

                    switch (node.init.type) {
                    case "CallExpression": {
                        const object = node.init.callee.type === "Identifier" ?
                            node.init.callee :
                            node.init.callee.object;
                            tracker.trackSdkUsage(object, sourceCode);
                        break;
                    }
                    default:
                        tracker.trackSdkUsage(node.init, sourceCode);
                        break;
                    }
                }
            },
            AssignmentExpression(node) {
                switch (node.right.type) {
                case "Identifier":
                case "MemberExpression":
                    tracker.trackHtmlDomUsage(node.left, node.right);
                    tracker.trackSdkUsage(node.right, sourceCode);
                    break;
                case "CallExpression":
                    tracker.trackHtmlDomUsage(node.left, node.right.callee);
                    tracker.trackSdkUsage(node.right, sourceCode);
                    break;
                }
            },
            "CallExpression:exit"(node) {
                if (tracker.hasCrmFormSdkUsage || tracker.hasCrmInternalUsage || tracker.hasXrmSdkUsage || (context.options[0] && context.options[0].requireXrm === false)) {                    
                    if (node.callee.property) {
                        let callName = node.callee.property.name;
                        let index = EVENT_HANDLER_FUNCTIONS.indexOf(callName);

                        if (index > -1) {
                            let snippet = sourceCode.getText(node);
                            ruleUtils.reportAccordingly(
                                context,
                                node,
                                MESSAGE_ID,
                                [snippet],
                                snippet
                            );
                        } else {
                            callName = ruleUtils.getFullyQualifiedFunctionName(node, true);
                            index = JQUERY_EVENT_HANDLER_FUNCTIONS.indexOf(callName);

                            if (index > -1) {
                                let snippet = sourceCode.getText(node);
                                ruleUtils.reportAccordingly(
                                    context,
                                    node.callee.property,
                                    MESSAGE_ID,
                                    [snippet],
                                    snippet
                                );
                            }
                        }
                    }
                }
            },
            "AssignmentExpression:exit"(node) {
                if (tracker.hasCrmFormSdkUsage || tracker.hasCrmInternalUsage || tracker.hasXrmSdkUsage || (context.options[0] && context.options[0].requireXrm === false)) {                    
                    if (node.left && node.left.type === "MemberExpression") {
                        const funcName = node.left.property.name;

                        if (AVAILABLE_EVENTS.includes(funcName)) {
                            let snippet = sourceCode.getText(node);
                            ruleUtils.reportAccordingly(
                                context,
                                node.left.property,
                                MESSAGE_ID,
                                [snippet],
                                snippet
                            );
                        }
                    }
                }
            }
        };
    }
};
