// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const TARGET_API = "showModalDialog";
const PARENT_OBJECTS = [
    "parent",
    "window"
];
const MESSAGE_ID = "message1";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "suggestion",

        docs: {
            description: "Use the Client API functions for Dialogs",
            category: "Supportability",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/avoid-modals"
        },

        messages: {
            [MESSAGE_ID]: "'{{ arg0 }}' opens a modal dialog. Modal dialogs are a deprecated feature with all modern browsers."
        }
    },

    create(context) {

        const sourceCode = context.getSourceCode();

        return {
            CallExpression(node) {
                const callee = node.callee;

                if (ruleUtils.isIdentifier(callee, TARGET_API)) {
                    
                    let snippet = sourceCode.getText(node);

                    ruleUtils.reportAccordingly(context, node, MESSAGE_ID, [snippet], snippet);
                } 
                else if (ruleUtils.isIdentifier(callee.property, TARGET_API)) {

                    for (let i = 0; i < PARENT_OBJECTS.length; i++) {
                        if (callee.object.name === PARENT_OBJECTS[i]) {

                            let snippet = sourceCode.getText(node);

                            ruleUtils.reportAccordingly(context, node, MESSAGE_ID, [snippet], snippet);

                            break;
                        }
                    }
                }
            }
        };
    }
};
