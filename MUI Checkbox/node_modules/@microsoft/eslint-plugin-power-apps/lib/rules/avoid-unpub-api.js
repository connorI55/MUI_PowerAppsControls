// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const UNSUPPORTED_CRM_NAMESPACES = [
    "CrmEncodeDecode",
    "Mscrm", // CRM 2011+
    "MSCRM", // CRM 4.0
    "XUI"
];

const UNSUPPORTED_CRM_GLOBAL_OBJECTS = [
    "APPLICATION_VERSION",
    "APPLICATION_FULL_VERSION",
    "AUTO_SAVE_ENABLED",
    "CLIENT_MAJOR_VERSION",
    "IS_CLAIMS",
    "IS_LIVE",
    "IS_ONPREMISE",
    "IS_OUTLOOK_14_CLIENT",
    "IS_OUTLOOK_CLIENT",
    "IS_OUTLOOK_LAPTOP_CLIENT",
    "IS_PATHBASEDURLS",
    "IS_PREVIEW_ORG",
    "IS_SANDBOX_ORG",
    "IS_SPLA",
    "IS_UEIP_ENABLED",
    "IsDuplicateDetectionEnabled",
    "IsDuplicateDetectionEnabledFormOnlineCreateUpdate",
    "REQ_ID",
    "USER_GUID",
    "USER_ROLES",
    "WEB_APP_URL",
    "WEB_RESOURCE_ORG_VERSION_NUMBER",
    "WEB_SERVER_HOST",
    "WEB_SERVER_PORT",
    "YAMMER_APP_ID",
    "YAMMER_GROUP_ID",
    "YAMMER_HAS_CONFIGURE_PRIVILEGE",
    "YAMMER_IS_CONFIGURED_FOR_ORG",
    "YAMMER_IS_CONFIGURED_FOR_USER",
    "YAMMER_IS_INSTALLED",
    "YAMMER_NETWORK_NAME",
    "YAMMER_POST_METHOD",
    "YAMMER_TOKEN_EXPIRED",
    "YAMMER_YAMMEREMBED_TIMESTAMP",
    "YAMMER_YAMMEREMBED_WRPCTOKEN",

    // Legacy Vars

    "crmFormSubmit",
    "crmGrid",
    "crmTopBar",
    "crmNavBar",
    "crmContentPanel",
    "crmNotifications"
];

const UNSUPPORTED_CRM_GLOBAL_CALLS = [
    "addElementSipRequest",
    "addIsvParameters",
    "addPassiveAuthParameters",
    "addSipRequest",
    "AsyncResultHandler",
    "attachWindowOnBeforeUnload",
    "attachWindowOnUnload",
    "AuthExpiryReminder",
    "buildWindowFeatures",
    "buildWinName",
    "cancelSignIn",
    "catchError",
    "checkForAllScriptsLoaded",
    "CheckForDuplicates",
    "CheckReminderState",
    "closeCurrentWindow",
    "closeOutlookWindow",
    "closeSession",
    "closeTabletExperienceError",
    "closeWindow",
    "closeWindowScript",
    "CommandParameter",
    "compareGuids",
    "ConcatenateUrl",
    "ConstructPopUp",
    "createGuid",
    "createMainUrl",
    "createPresenceControlInfo",
    "createPresenceInfo",
    "createPresenceInfoArray",
    "CreateXslTemplate",
    "CreateXslTemplateByXml",
    "crmCreate",
    "CrmEncodeDecodeLibrary",
    "CRMWindowInfo",
    "customErrorHandler",
    "destroyPresenceControlInstance",
    "detachWindowOnBeforeUnload",
    "detachWindowOnUnload",
    "displayNavTourOnFirstRun",
    "executeDialogCloseCallback",
    "executeOnBeforeUnloadHandlers",
    "executeOnUnloadHanlders",
    "findAndRefreshGrids",
    "finishPreload",
    "formatString",
    "formatUrlForToken",
    "genericRefreshGridCallback",
    "getCrmGrid",
    "GetCrmWrpcToken",
    "getDialogArguments",
    "getDialogReturnValue",
    "getDomEventElement",
    "GetEntityIdAndDisplayName",
    "getFormMode",
    "getGridId",
    "getGridRecords",
    "getHomePageQueryStringParams",
    "getHomePageUrlForRecordPage",
    "getIconPath",
    "getImageLocation",
    "getInlineDialogArguments",
    "getMainPageManager",
    "getNavigationMode",
    "getOutlookHostedWindow",
    "getOutlookMajorVersion",
    "getPageManager",
    "getPageUrl",
    "getPreloadInfo",
    "getPresenceUri",
    "getRecordPageQueryStringParams",
    "getRecordUrl",
    "getStickyViewIdForSubAreaPage",
    "getTodayBarHtml",
    "GetTokenasQS",
    "getViewUrl",
    "GetWindowInformation",
    "getWindowInformation",
    "getWindowOpenTimeJson",
    "getXmlFromExecuteRibbonCommand",
    "getXYPos",
    "goTo",
    "HandleKeysForCalPopUp",
    "handlePopupBlockerError",
    "handleXMLErr",
    "hasSipAttribute",
    "HideActionMsg",
    "InitDateVars",
    "IsActionMsgShow",
    "IsActivityTypeCode",
    "isComingFromReport",
    "isControlVisible",
    "isDigit",
    "isEditMode",
    "isHelpContext",
    "isHompageUrl",
    "isInlinedDialog",
    "isNewPageModel",
    "IsOutlook14Client",
    "IsOutlookHostedWindow",
    "IsOutlookInstance",
    "isPreloadComplete",
    "isPresenceType",
    "isRibbonControlEnabled",
    "isRibbonControlVisible",
    "isRichClient",
    "IsUserDefinedEntityObjectTypeCode",
    "isValidForStickyViews",
    "LaunchCalendar",
    "LaunchInlineCalendar",
    "loadCachedPage ",
    "loadCommandData",
    "loadHelp",
    "loadRibbonData",
    "loadScriptAdv",
    "loadScriptsAdv",
    "loadXmlDocument",
    "loadXmlDocumentAsFreeThreaded",
    "LocalDateTimeNow",
    "MainAspxPageOnload",
    "masterWindow",
    "notifyOnAllScriptsLoaded",
    "openErrorDlg",
    "openErrorDlgWithDetailedInfo",
    "openFrmObj",
    "openFrmObject",
    "openInPlace",
    "openIsvWin",
    "openItem",
    "openObj",
    "openObject",
    "openObjEtn",
    "openObjEx",
    "openPopup",
    "openStdDlg",
    "openStdDlgWithCallback",
    "openStdWin",
    "openStdWinWithFeatures",
    "openStdWinWithUrlPreload",
    "openUrl",
    "openUrlByCrmUrl",
    "pendingEmailApprovalAction",
    "performActionAfterSwitch",
    "performActionAfterViewDuplicates",
    "popOutSourceUrl",
    "populateWindowArgumentsForDialog",
    "preloadPage",
    "promptAndReportScriptErrors",
    "QualifyLeadSuppressDeDup",
    "raiseEvent",
    "raiseRibbonRootEvent",
    "raiseTabSwitchEvent",
    "ReadyStateChanged",
    "refreshCurrentGrid",
    "refreshParentGrid",
    "refreshRibbon",
    "RefreshServiceCalendar",
    "refreshWorkflowGrid",
    "ReInitializeAuthExpireReminder",
    "reloadReadForm",
    "reportScriptError",
    "ribbonDebugAlert",
    "safeEmailWindowOpen",
    "safeWindowOpen",
    "safeWindowShowModalDialog",
    "safeWindowShowModelessDialog",
    "SetCrmWrpcToken",
    "SetDateValues",
    "SetDefaultStyles",
    "setElementSize",
    "SetFieldRequiredOrRecommended",
    "setFocusOnLastRibbonControl",
    "setFocusOnRibbon",
    "setFormMode",
    "setPreloadPageParameters",
    "setSelectedControl",
    "setSizeMaintainRatio",
    "SetTokenInHeader",
    "shouldLaunchPageInOutlookHostWindow",
    "showAuthDiv",
    "showHelp",
    "ShowSessionExpired",
    "showTabletExperienceError",
    "signin",
    "startLoadContent",
    "storeScriptCrashData",
    "Trim",
    "TrimSpaces",
    "TryRefreshWebGrid",
    "unloadRibbonData",
    "ValidateStartDateIsSmallerThanEndDate",
    "validateUrlProtocol",
    "ViewXml",
    "waitForContentToStartLoaded",
    "waitForJScriptsToLoad",

    // Legacy Calls

    "ShowAppNav",
    "IsValid",
    "SubmitCrmForm",
    "IsReadyToClose",
    "detachCloseAlert",
    "RunReport",
    "Print",
    "BuildXml",
    "BuildXmlToSubmitForm",
    "SetFieldReqLevel",
    "SetAllFieldsToNonReqLevel",
    "displayMissingValue",
    "GetLabelControl",
    "FireSaveEvent",
    "HideField",
    "VerifyFieldIsSet",
    "SetDeferredCmdId",
    "CheckFormDirty",
    "CloseAlertAttached",
    "SetViewPortTabSection",
    "ModifyMinimumTabHeight",
    "GetXml",
    "ParseXml",
    "RaiseOnChange",
    "CreateInnerSlug",
    "ResetToDefault",
    "ResetDefault",
    "FormatDuration",
    "AddDependentParameter",
    "AddParam",
    "AddBindingColumn",
    "getLookupField",
    "Clear",
    "Lookup",
    "AddItems",
    "Remove",
    "UpdateItem",
    "IsPermissableType",
    "RaiseOnAfterSelectEvent",
    "RaiseSetAdditionalParamsEvent",
    "AreValuesDifferent",
    "RefreshLookupItemImage",
    "GetLookupTypeIcon",
    "GetDataXml",
    "SetCurrency",
    "InitializeLookupPresence",
    "QueryLookupPresence",
    "SetTime",
    "AddOptionGroup",
    "InsertSlugControl",
    "UpdateOperatorControl",
    "UpdateInnerHtml",
    "DeleteDataSlug",
    "CurrentOperatorIsClear",
    "CalculateDataSlugTabIndex",
    "refreshTimeValue",
    "attachAsOnlyHandler",
    "GetLookupControl",
    "Sort"
];

const SUPPORTED_XRM_APIS = [
    "Page",
    "Utility",
    "Mobile",
    "WebApi",
    "Navigation",
    "Encoding",
    "Device",
    "Panel",
    "App"
];

const MESSAGE_ID_NAMESPACE = "message2";
const MESSAGE_ID_GLOBAL_OBJ = "message3";
const MESSAGE_ID_GLOBAL_FUNC = "message4";
const MESSAGE_ID_CSS_STYLE = "message5";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "problem",

        docs: {
            description: "Do not use unpublished object model members or components",
            category: "error",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/avoid-unpub-api"
        },

        messages: {
            [MESSAGE_ID_NAMESPACE]: "Unsupported namespace '{{ arg0 }}'",
            [MESSAGE_ID_GLOBAL_OBJ]: "Unsupported global object '{{ arg0 }}'",
            [MESSAGE_ID_GLOBAL_FUNC]: "Unsupported global function '{{ arg0 }}'",
            [MESSAGE_ID_CSS_STYLE]: "Unsupported CSS style '{{ arg0 }}'"
        }
    },

    create(context) {

        const tracker = new ruleUtils.usageTracker();
        const sourceCode = context.getSourceCode();

        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------

        function tryReportNamespace(node) {
            let rootObject;

            if (node.object.type === "Identifier") {
                rootObject = node.object;
            } else if (node.object.type === "MemberExpression") {
                if (tracker.referencesWindow(node.object)) {
                    rootObject = node.object.property;
                }
            }

            if (rootObject) {
                const rootName = rootObject.name;
                let propName;

                if (node.property) {
                    propName = node.property.name;
                }

                if (rootName === "Xrm") {
                    if (propName && !SUPPORTED_XRM_APIS.includes(propName)) {
                        let snippet = sourceCode.getText(node);
                        ruleUtils.reportAccordingly(
                            context,
                            node.property,
                            MESSAGE_ID_NAMESPACE,
                            [propName],
                            snippet
                        )
                    }
                } else if (rootName === "Microsoft") {
                    if (propName === "Crm") {
                        let snippet = sourceCode.getText(node);
                        ruleUtils.reportAccordingly(
                            context,
                            node.property,
                            MESSAGE_ID_NAMESPACE,
                            [propName],
                            snippet
                        )
                    }
                } else if (UNSUPPORTED_CRM_NAMESPACES.includes(rootName)) {
                    let snippet = sourceCode.getText(node);
                    ruleUtils.reportAccordingly(
                        context,
                        node.property,
                        MESSAGE_ID_NAMESPACE,
                        [propName],
                        snippet
                    )
                }
            }
        }

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return {
            VariableDeclarator(node) {
                if (node.init) {
                    tracker.checkForParentAssignment(node.id, node.init, sourceCode);
                }
            },
            "Identifier:exit"(node) {
                if (UNSUPPORTED_CRM_GLOBAL_OBJECTS.includes(node.name)) {
                    let snippet = sourceCode.getText(node);
                    ruleUtils.reportAccordingly(
                        context,
                        node,
                        MESSAGE_ID_GLOBAL_OBJ,
                        [node.name],
                        snippet
                    )
                }
            },
            "MemberExpression:exit"(node) {
                tryReportNamespace(node);
            },
            "CallExpression:exit"(node) {
                if (tracker.isGlobalCall(node.callee)) {
                    node = node.callee.property ? node.callee.property : node.callee;

                    if (UNSUPPORTED_CRM_GLOBAL_CALLS.includes(node.name)) {
                        let snippet = sourceCode.getText(node);
                        ruleUtils.reportAccordingly(
                            context,
                            node,
                            MESSAGE_ID_GLOBAL_FUNC,
                            [node.name],
                            snippet
                        )
                    }
                } else if (node.arguments && node.arguments.length > 0) {
                    for (let i = 0; i < node.arguments.length; i++) {
                        const arg = node.arguments[i];

                        if (arg.type === "Literal"
                            && arg.value
                            && typeof arg.value === "string"
                            && arg.value.includes("ms-crm-")) {

                            let snippet = sourceCode.getText(node);
                            ruleUtils.reportAccordingly(
                                context,
                                arg,
                                MESSAGE_ID_CSS_STYLE,
                                [arg.value],
                                snippet
                            )
                        }
                    }
                }
            }
        };
    }
};
