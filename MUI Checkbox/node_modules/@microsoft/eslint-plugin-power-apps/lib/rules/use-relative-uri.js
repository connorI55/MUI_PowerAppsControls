// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const ruleUtils = require("../utils/rule-utils");

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const MESSAGE_ID = "message1";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        hasSuggestions: true,

        type: "problem",

        docs: {
            description: "Do not use an absolute path for Dataverse endpoint URLs",
            category: "Performance",
            recommended: true,
            url: "https://docs.microsoft.com/power-apps/maker/data-platform/powerapps-checker/rules/web/use-relative-uri"
        },

        fixable: "code",

        messages: {
            [MESSAGE_ID]: "The URL '{{ arg0 }}' appears to be an absolute reference to a Dataverse endpoint. Dataverse endpoint URL's should be constructed using the appropriate client API function along with a relative path to the desired endpoint."
        }
    },

    create(context) {

        const sourceCode = context.getSourceCode();
        const endpoints = [
            "/api/data/v",
            "/api/discovery/v",
            "/xrmservices/2011/organization.svc",
            "/xrmservices/2011/organizationdata.svc",
            "/xrmservices/2011/discovery.svc",
            "/mscrmservices/2007/crmservice.asmx",
            "/mscrmservices/2007/metadataservice.asmx",
            "/mscrmservices/2007/ad/crmdiscoveryservice.asmx",
            "/mscrmservices/2007/spla/crmdiscoveryservice.asmx",
            "/mscrmservices/2007/passport/crmdiscoveryservice.asmx"];

        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------

        /**
         * Check a string to determine if it is valid for this rule.
         *
         * @param {ASTNode} string The string to test.
         * @returns {boolean} True if the string is an absolute URL, false otherwise.
         */
        function isAbsoluteUrlString(string) {
            try {
                new URL(string);
                return true;
            } catch(e) {
                return false;
            }
        }

        /**
         * Process a string node to determine if it needs to be reported.
         *
         * @param {ASTNode} stringNode The string node to process.
         * @returns {void}
         */
        function processString(stringNode) {

            // Value string will be "quoted" or 'aposed'.
            const urlVal = ruleUtils.stringTrimAny(stringNode.value, ["\"", "'"]); 

            if (isAbsoluteUrlString(urlVal)) {

                endpoints.forEach(function (element) {

                    const index = urlVal.toLocaleLowerCase().indexOf(element);
                    if (index > -1) {
                        let fixer = function (fixer) {
                                return fixer.replaceText(stringNode, "\"" + urlVal.substring(index) + "\"");                               
                            };
                        ruleUtils.reportAccordingly(
                            context,
                            stringNode,
                            MESSAGE_ID,
                            [ urlVal ],
                            sourceCode.getText(stringNode),
                            fixer
                        );

                        // Don't iterate them all as it was already found.
                        return;
                    }
                });
            }
        }

        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------

        return {
            Program() {
                const stringNodes = ruleUtils.getAllStrings(sourceCode);

                stringNodes.forEach(processString);
            }
        };
    }
};
