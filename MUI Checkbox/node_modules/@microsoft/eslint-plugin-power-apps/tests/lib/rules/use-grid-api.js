// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const rule = require("../../../lib/rules/use-grid-api");
const RuleTester = require("eslint").RuleTester;

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const MESSAGE_ID = "message2";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const ruleTester = new RuleTester();

ruleTester.run("use-grid-api", rule, {
    valid: [
        // Valid
        `    // VALID
             var rowData = getGrid().getRows().get(0).data;
        `
    ],
    invalid: [
        // InlineCall
        {
            code:
            `    // INVALID: InlineCall
                 var data = getGrid().getRows().get(0).getData();
                 
                 var grid1 = getGrid();
                 var rowsList1 = grid1.getRows();
                 var data1 = rowsList1.get(0).getData();
                 
                 var grid2 = getGrid();
                 var rowsList2 = grid2.getRows();
                 var data2 = rowsList2[0].getData();
                 
                 var grid3 = getGrid();
                 var rowsList3 = grid3.getRows();
                 var row1 = rowsList3.get(0);
                 var data3 = row1.getData();
                 
                 var grid4 = getGrid();
                 var rowsList4 = grid4.getRows();
                 var row2 = rowsList4[0];
                 var data4 = row2.getData();
                 
                 var grid6 = getGrid();
                 var rowsList6 = grid6.getRows();
                 for (var i; i < rowsList6.length; i++) {
                     rowsList6[i].getData();
                 };
                 
                 var rowsList7 = getGrid().getSelectedRows();
                 var row7 = rowsList7.get(0);
                 var data7 = row7.getData();
                 
                 var data8 = rowsList7.get(0).getData();
                 var data9 = rowsList7[0].getData();
                 
                 var grid7 = getGrid();
                 var data = grid7.getSelectedRows().get(3).getData();

                 var num = Number(0);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 2 },
                { messageId: MESSAGE_ID, line: 6 },
                { messageId: MESSAGE_ID, line: 10 },
                { messageId: MESSAGE_ID, line: 15 },
                { messageId: MESSAGE_ID, line: 20 },
                { messageId: MESSAGE_ID, line: 25 },
                { messageId: MESSAGE_ID, line: 30 },
                { messageId: MESSAGE_ID, line: 32 },
                { messageId: MESSAGE_ID, line: 33 },
                { messageId: MESSAGE_ID, line: 36 }
            ]
        },
        // functionIterationCallToRowObject
        {
            code:
            `    // INVALID: functionIterationCallToRowObject
                 var gridRowList1 = getGrid().getRows();
                 for (eachRow in gridRowList1) {
                     eachRow.getData();
                 };
                 
                 var grid5 = getGrid();
                 var rowsList5 = grid5.getRows();
                 rowsList5.forEach(function (row) {
                     row.getData();
                 });
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 4 },
                { messageId: MESSAGE_ID, line: 10 }
            ]
        }
    ]
});
