// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const rule = require("../../../lib/rules/avoid-isactivitytype");
const RuleTester = require("eslint").RuleTester;

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const MESSAGE_ID = "message2";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const ruleTester = new RuleTester();

ruleTester.run("avoid-isActivityType", rule, {
    valid: [
        // Valid OtherMethodsOnXrmUtility
        `    // VALID: OtherMethodsOnXrmUtility
             function doWork() {
                 Xrm.Utility.getBarcodeValue().then(successCallback, errorCallback);
                 
                 if (Xrm.Utility.getGlobalContext().isOnPremises) {
                     return false;
                 }
             }
             function isActivityType() {}
             this.isActivityType();
        `
    ],
    invalid: [
        // DirectCallOnXrmUtilityObject
        {
            code:
            `    // INVALID: DirectCallOnXrmUtilityObject
                 function doWork() {
                     var entityName = "form";
                     var isMyEntity = Xrm.Utility.isActivityType(entityName);
                     var isAccountEntity = Xrm.Utility.isActivityType("account");
                     isAccountEntity = window.Xrm.Utility.isActivityType("account");
                     var func = function() {};
                     func();
                     
                     if (Xrm.Utility.isActivityType(myEntity.LogicalName)) {
                         return true;
                     }
                     
                     return Xrm.Utility.isActivityType("sampleEntity");
                     var found = parent.Xrm.Utility.isActivityType("entity");

                     var found2 = window.parent.Xrm.Utility.isActivityType("entity");
                     var found3 = window.opener.Xrm.Utility.isActivityType("entity");                 
                     var found3 = window.parent.parent.Xrm.Utility.isActivityType("entity");                 
                }
                var found2 = window.parent.Xrm.Utility.isActivityType("entity");
                var found3 = window.opener.Xrm.Utility.isActivityType("entity");                 
                var found3 = window.parent.parent.Xrm.Utility.isActivityType("entity");     
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 4 },
                { messageId: MESSAGE_ID, line: 5 },
                { messageId: MESSAGE_ID, line: 6 },
                { messageId: MESSAGE_ID, line: 10 },
                { messageId: MESSAGE_ID, line: 14 },
                { messageId: MESSAGE_ID, line: 15 },
                { messageId: MESSAGE_ID, line: 17 },
                { messageId: MESSAGE_ID, line: 18 },
                { messageId: MESSAGE_ID, line: 19 },
                { messageId: MESSAGE_ID, line: 21 },
                { messageId: MESSAGE_ID, line: 22 },
                { messageId: MESSAGE_ID, line: 23 }
            ]
        }
    ]
});
