// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const rule = require("../../../lib/rules/use-async");
const RuleTester = require("eslint").RuleTester;
const MESSAGE_ID = "message2";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const ruleTester = new RuleTester();

ruleTester.run("use-async", rule, {
    valid: [
        // VanillaJavascript
        `    // VALID: VanillaJavascript
             var request = new XMLHttpRequest();
             request.open('GET', '/test/test.txt', true);
             request.open('GET', '/test/test.txt', true, "testUser");
             request.open('GET', '/test/test.txt', true, "testUser", "testPassword");
        `,
        // VanillaJavascriptNoAsyncArg
        `    // VALID: VanillaJavascript
             var request = new XMLHttpRequest();
             request.open('GET', '/test/test.txt');
        `,
        // VanillaJavascriptAsyncVar
        `    // VALID: VanillaJavascriptAsyncVar
             var request = new XMLHttpRequest();
             var async = true;
             request.open('GET', '/test/test.txt', async);
        `,
        // VanillaJavascriptInlineInit
        `    // VALID: VanillaJavascriptInlineInit
             var request = new XMLHttpRequest().open('GET', ' / test / test.txt', true);
        `,
        // FunctionResultXHRNewExpression
        `   // VALID: FunctionResultXHRNewExpression
            function NetworkManager(url, args) {
                this._url = url;
                this._args = args || {};
                this.getXhr = args.getXhr || function () { return new XMLHttpRequest };
                this.get = function () {
                    return this.getXhr().open('GET', this._url, true);
                }
            }
            var myNetworkManager = new NetworkManager('/test/test.txt', null);
            var request = myNetworkManager.get();
            
            // Can't currently detect this pattern because we don't track the XHR back to object instance assigned to local var
            // var request2 = myNetworkManager.getXhr().open('GET', '/test/test.txt', null);
            
            var myXhr = function () { return new XMLHttpRequest };
            myXhr().open('GET', '/test/test.txt', true);
            
            var myBasicObj = {
                getXhr: function () {
                    return new XMLHttpRequest
                }
            }
            myBasicObj.getXhr().open('GET', '/test/test.txt', true);
            
            var myNestedFunctionalObject = {
                getChild: function () {
                    return {
                        getXhr: function () {
                            return new XMLHttpRequest;
                        }
                    }
                }
            };
            myNestedFunctionalObject.getChild().getXhr().open('GET', '/test/test.txt', true);
            
            var myNestedChainingObject = {
                propA: {
                    propB: {
                        propC: function () {
                            return new XMLHttpRequest;
                        }
                    }
                }
            }
            myNestedChainingObject.propA.propB.propC().open('GET', '/test/test.txt', true);
        `,
        // TrickRequest
        `    // VALID: TrickRequest
             var someObject = notQuiteAnXHRObject.open('POST', 'www.testurl.edu', false);
        `,
        // FunctionResultAsyncVar
        `    // VALID: FunctionResultAsyncVar
             function myTrueFunction() {
                 return true;
             }
             
             var asyncVar = myTrueFunction();
             var request = new XMLHttpRequest();
             request.open("GET", "myUrl.com", asyncVar);
             
             function myTrueFunction1() {
                 var temp = true;
                 return temp;
             };
             
             var request2 = new XMLHttpRequest();
             request2.open("GET", "myUrl.com", myTrueFunction1);
        `,
        // JQueryAjax
        `    // VALID: JQueryAjax
             var request = $.ajax({ async: true, url: '/test/test.txt' });
             
             var asyncAjaxProp = true;
             var ajaxRequest = $.ajax({ async: asyncAjaxProp });
        `,
        // JQueryAjaxSetup
        `    // VALID: JQueryAjaxSetup
             $.ajaxSetup({ async: true });
             var request = $.ajax({ url: '/test/test.txt' });
        `,
        // JQueryAjaxGetDirectCall
        `    // VALID: JQueryAjaxGetDirectCall
             var request = $.get({ async: true, url: '/test/test.txt' });
             var jQueryAjax = jQuery.ajax({ async: true, url: 'www.microsoft.com' });
        `,
        // AsyncVarAsFunctionJQuery
        `    // VALID: AsyncVarAsFunctionJQuery
             var param1 = function () {
                 return true;
             };
             
             var ajaxXhr1 = $.ajax({ async: param1, url: "www.myUrl.com" });
             
             function myFunction() {
                 var myVar = true;
                 return myVar;
             };
             
             var param2 = myFunction();
             var ajaxXhr2 = jQuery.get({ async: param2, url: "www.myUrl.com" });
             
             var ajaxXhr3 = $.post({ async: myFunction(), url: "www.myUrl.com" });
        `,
        // AsyncJQueryInFunction
        `   // VALID: AsyncJQueryInFunction
             var getAjax = myGetReturn("foo.bar", { name: "John", time: "2pm" }, function(data) { }, "json");
             function myGetReturn(url, data, success, type) {
                 return $.get(url, data, success, type);
             }
             function myGet() {
                var ajaxXhr = jQuery.get("foo.bar", function(data) { });                 
             }

             var postAjax = myPostReturn("foo.bar", { name: "John", time: "2pm" }, function(data) { }, "json");
             function myPostReturn(url, data, success, type) {
                 return jQuery.post(url, data, success, type);
             }
             function myPost() {
                var ajaxXhr = $.post("foo.bar", function(data) { });
             } 
             
             var getJSONAjax = myGetJSONReturn("foo.bar", { name: "John", time: "2pm" }, function(data) { });
             function myGetJSONReturn(url, data, success) {
                 return $.getJSON(url, data, success);
             }
             function myGetJSON() {
                 var ajaxXhr = $.getJSON("foo.bar", { name: "John", time: "2pm" }, function(data) { });
             }
             
             var getScriptAjax = myGetScriptReturn("foo.bar", function(data) { });
             function myGetScriptReturn(url, success) {
                 return $.getScript(url, success);
             }
             function myGetScript() {
                 var ajaxXhr = $.getScript("foo.bar", function(data, textStatus, xhr) { });
             }
        `,
        // EmptyFunction
        `    // VALID: EmptyFunction
             function setEvents() {
             }
             
             var x = function (a, b) { };
        `,
        // XrmServiceToolKitRestMethods
        `    // VALID: XrmServiceToolKitRestMethods
             var myRestEntityObject = {
                 LogicalName: "myRestEntityName",
                 Prop1: "prop1",
                 Prop2: "prop2"
             };
             var trueAsyncParam = true;
             
             XrmServiceToolkit.Rest.Create(myRestEntityObject, "myRestEntityObjectType", successCallback, errorCallback, true);
             XrmServiceToolkit.Rest.Create(myRestEntityObject, "myRestEntityObjectType", successCallback, errorCallback, trueAsyncParam);
             
             XrmServiceToolkit.Rest.Retrieve("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "myRestEntityObjectType", "QueryData", "ExpandData", successCallback, errorCallback, true);
             XrmServiceToolkit.Rest.Retrieve("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "myRestEntityObjectType", "QueryData", "ExpandData", successCallback, errorCallback, trueAsyncParam);
             
             XrmServiceToolkit.Rest.Update("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", myRestEntityObject, "myRestEntityObjectType", successCallback, errorCallback, true);
             XrmServiceToolkit.Rest.Update("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", myRestEntityObject, "myRestEntityObjectType", successCallback, errorCallback, trueAsyncParam);
             
             XrmServiceToolkit.Rest.Delete("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "myRestEntityObjectType", successCallback, errorCallback, true);
             XrmServiceToolkit.Rest.Delete("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "myRestEntityObjectType", successCallback, errorCallback, trueAsyncParam);
             
             XrmServiceToolkit.Rest.RetrieveMultiple("myRestEntityObjectType", "options", successCallback, errorCallback, onCompleteCallback, true);
             XrmServiceToolkit.Rest.RetrieveMultiple("myRestEntityObjectType", "options", successCallback, errorCallback, onCompleteCallback, trueAsyncParam);
             
             XrmServiceToolkit.Rest.Associate("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "setName1", "929bdc97-97e5-4a86-b219-3a0f9b1014de", "setName2", "associatingRelationship", successCallback, errorCallback, true);
             XrmServiceToolkit.Rest.Associate("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "setName1", "929bdc97-97e5-4a86-b219-3a0f9b1014de", "setName2", "associatingRelationship", successCallback, errorCallback, trueAsyncParam);
             
             XrmServiceToolkit.Rest.Disassociate("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "setName1", "929bdc97-97e5-4a86-b219-3a0f9b1014de", "associatingRelationship", successCallback, errorCallback, true);
             XrmServiceToolkit.Rest.Disassociate("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "setName1", "929bdc97-97e5-4a86-b219-3a0f9b1014de", "associatingRelationship", successCallback, errorCallback, trueAsyncParam);
        `,
        // XrmServiceToolkitSoapMethods
        `    // VALID: XrmServiceToolkitSoapMethods
             var mySoapEntityObject = {
                 LogicalName: "mySoapEntityName",
                 Id: "929bdc97-97e5-4a86-b219-3a0f9b1014de",
                 Prop1: "prop1",
                 Prop2: "prop2"
             };
             
             XrmServiceToolkit.Soap.Create(mySoapEntityObject, callbackMethod);
             XrmServiceToolkit.Soap.Update(mySoapEntityObject, callbackMethod);
             XrmServiceToolkit.Soap.Delete(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, callbackMethod);
             
             var soapRequest = "soapBodyData";
             XrmServiceToolkit.Soap.Execute(soapRequest, callbackMethod);
             XrmServiceToolkit.Soap.Fetch("serialized xml", true, callbackMethod);
             
             var columnSet = ["attribute1", "attribute2", "attribute3"];
             XrmServiceToolkit.Soap.Retrieve(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, columnSet, callbackMethod);
             XrmServiceToolkit.Soap.RetrieveMultiple("queryString", callbackMethod);
             
             var queryOptions = {
                 entityName: "contact",
                 attributes: ["statecode"],
                 values: ["myVal"],
                 columnSet: ["firstname", "lastname", "middlename", "familystatuscode", "ownerid", "creditlimit", "birthdate", "donotemail", "donotphone"],
                 orderBy: ["firstname", "lastname"]
             };
             
             XrmServiceToolkit.Soap.QueryByAttribute(queryOptions, callbackMethod);
             XrmServiceToolkit.Soap.QueryAll(queryOptions, callbackMethod);
             XrmServiceToolkit.Soap.SetState(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, 2, 1, callbackMethod);
             
             var relatedBusinessEntities = ["account"];
             XrmServiceToolkit.Soap.Associate("relationshipName", mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", relatedBusinessEntities, callbackMethod);
             XrmServiceToolkit.Soap.Disassociate("relationshipName", mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", relatedBusinessEntities, callbackMethod);
             XrmServiceToolkit.Soap.Assign(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", "correspondintEntityId", callbackMethod);
             
             var accessOptions = {
                 targetEntityName: mySoapEntityObject.LogicalName,
                 targetEntityId: mySoapEntityObject.Id,
                 principalEntityName: "systemUser",
                 principalEntityId: "currentUserId",
                 accessRights: ["ReadAccess", "WriteAccess"]
             };
             
             XrmServiceToolkit.Soap.GrantAccess(accessOptions, callbackMethod);
             XrmServiceToolkit.Soap.ModifyAccess(accessOptions, callbackMethod);
             XrmServiceToolkit.Soap.RevokeAccess(accessOptions, callbackMethod);
             XrmServiceToolkit.Soap.RetrievePrincipalAccess(accessOptions, callbackMethod);
             
             var entityFilters = ["Entity", "Relationship", "Attributes", "Privileges"];
             XrmServiceToolkit.Soap.RetrieveAllEntitiesMetadata(entityFilters, true, callbackMethod);
             XrmServiceToolkit.Soap.RetrieveEntityMetadata(entityFilters, mySoapEntityObject.LogicalName, true, callbackMethod);
             XrmServiceToolkit.Soap.RetrieveAttributeMetadata(mySoapEntityObject.LogicalName, "Privileges", false, callbackMethod);
        `
    ],
    invalid: [
        // VanillaJavascript
        {
            code:
            `   // INVALID: VanillaJavascript 1
                var xhrRequestInit = new XMLHttpRequest();
                xhrRequestInit.open('GET', '/test/test.txt', false);
                xhrRequestInit.open('GET', '/test/test.txt', undefined);
                xhrRequestInit.open('GET', '/test/test.txt', null);
                xhrRequestInit.open('GET', '/test/test.txt', 0);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 },
                { messageId: MESSAGE_ID, line: 4 },
                { messageId: MESSAGE_ID, line: 5 },
                { messageId: MESSAGE_ID, line: 6 }
            ]
        },
        {
            code:
            `   // INVALID: VanillaJavascript 2
                var xhrRequestInit = new XMLHttpRequest();
                xhrRequestInit.open('POST', '/test/test.txt', false);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 }
            ]
        },
        {
            code:
            `   // INVALID: VanillaJavascript 3
                var xhrRequestInit = new XMLHttpRequest();
                xhrRequestInit.open('GET', '/test/test.txt', false, 'testUser');
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 }
            ]
        },
        {
            code:
            `   // INVALID: VanillaJavascript 4
                var xhrRequestInit = new XMLHttpRequest();
                xhrRequestInit.open('POST', '/test/test.txt', false, 'testUser');
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 }
            ]
        },
        {
            code:
            `   // INVALID: VanillaJavascript 5
                var xhrRequestInit = new XMLHttpRequest();
                xhrRequestInit.open('GET', '/test/test.txt', false, 'testUser', 'testPassword');
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 }
            ]
        },
        {
            code:
            `   // INVALID: VanillaJavascript 6
                var xhrRequestInit = new XMLHttpRequest();
                xhrRequestInit.open('POST', '/test/test.txt', false, 'testUser', 'testPassword');
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 }
            ]
        },
        // VanillaJavascriptAsyncVar
        {
            code:
            `   // INVALID: VanillaJavascriptAsyncVar
                var request = new XMLHttpRequest();
                var asyncParam = false; request.open('GET', '/test/test.txt', asyncParam);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 }
            ]
        },
        // VanillaJavascriptAsyncVarReassignment
        {
            code:
            `   // INVALID: VanillaJavascriptAsyncVarReassignment
                var request = new XMLHttpRequest();
                var asyncParam = false;
                var newAsyncParam = asyncParam;
                request.open('GET', '/test/test.txt', newAsyncParam);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 5 }
            ]
        },
        // FalseVarReassignment
        {
            code:
            `   // INVALID: FalseVarReassignment
                var asyncParam1 = null;
                var asyncParam2 = false;
                asyncParam1 = asyncParam2;
                var xhrRequestInitInline = new XMLHttpRequest().open('GET', '/test/test.txt', asyncParam1);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 5 }
            ]
        },
        // AsyncVarAsFunction
        {
            code:
            `   // INVALID: AsyncVarAsFunction
                var asyncParam3 = function () {
                    return false;
                };

                var syncXhr1 = new XMLHttpRequest();
                syncXhr1.open('GET', 'myUrl.com', asyncParam3);

                function myFunction() {
                    var myVar = false;
                    return myVar;
                };

                var asyncParam4 = myFunction();

                var syncXhr2 = new XMLHttpRequest();
                syncXhr2.open('GET', 'myUrl.com', asyncParam4);

                var syncXhr3 = new XMLHttpRequest();
                syncXhr3.open('GET', 'myUrl.com', myFunction());
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 7 },
                { messageId: MESSAGE_ID, line: 17 },
                { messageId: MESSAGE_ID, line: 20 }
            ]
        },
        // AsyncVarAsExpression
        {
            code:
            `   // INVALID: AsyncVarAsExpression
                var asyncParam5 = testObject1 == testObject2;
                var syncXhr4 = new XMLHttpRequest();
                syncXhr4.open("GET", "www.myUrl.com", asyncParam5);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 4 }
            ]
        },
        // VanillaJavascriptInlineInit
        {
            code:
            `   // INVALID: VanillaJavascriptInlineInit
                var xhrRequestInitInline = new XMLHttpRequest().open("GET", "/test/test.txt", false);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 2 }
            ]
        },
        // VanillaJavascriptReassignment
        {
            code:
            `   // INVALID: VanillaJavascriptReassignment
                var xhrInitForReassignment = new XMLHttpRequest();
                var xhrReassignment = xhrInitForReassignment;
                xhrReassignment.open("GET", "/test/test.txt", false);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 4 }
            ]
        },
        // VanillaJavascriptNoInit
        {
            code:
            `   // INVALID: VanillaJavascriptNoInit
                var xhrRequestNonInit = XMLHttpRequest;
                xhrRequestNonInit().open("POST", "/test/test.txt", false, "testUser", "testPassword");
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 }
            ]
        },
        // LocalVarFunctionResultXHRNewExpression
        {
            code:
            `   // INVALID: LocalVarFunctionResultXHRNewExpression
                var myXhr = function () { return new XMLHttpRequest };
                myXhr().open('GET', '/test/test.txt', false);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 }
            ]
        },
        // LocalVarObjectPropertyFunctionResultXHRNewExpression
        {
            code:
            `   // INVALID: LocalVarObjectPropertyFunctionResultXHRNewExpression
                var myBasicObj = {
                    getXhr: function () {
                        return new XMLHttpRequest
                    }
                }
                myBasicObj.getXhr().open('GET', '/test/test.txt', false);

                var myNestedFunctionalObject = {
                    getChild: function () {
                        return {
                            getXhr: function () {
                                return new XMLHttpRequest;
                            }
                        }
                    }
                };
                myNestedFunctionalObject.getChild().getXhr().open('GET', '/test/test.txt', false);
                
                var myNestedStaticObject = {
                    propA: {
                        propB: {
                            propC: function () {
                                return new XMLHttpRequest;
                            }
                        }
                    }
                }
                myNestedStaticObject.propA.propB.propC().open('GET', '/test/test.txt', false);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 7 },
                { messageId: MESSAGE_ID, line: 18 },
                { messageId: MESSAGE_ID, line: 29 },
            ]
        },
        // ObjectMemberAssignedXHRNewExpression
        {
            code:
            `   // INVALID: ObjectMemberAssignedXHRNewExpression
                var myNestedObject = {
                    propA: {
                        propB: {
                            propC: {
                            }
                        }
                    }
                }
                myNestedObject.propA.propB.propC = new XMLHttpRequest();
                myNestedObject.propA.propB.propC.open('GET', '/test/test.txt', false);

                // TODO: detect VariableDeclarator initialized to known instance
                //var localB = myNestedChainingAssignedObject.propA.propB.propC
                //localB.open('GET', '/test/test.txt', false);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 11 },
            ]
        },
        // NamedFunctionResultXHRNewExpression
        {
            code:
            `   // INVALID: NamedFunctionResultXHRNewExpression
                function NetworkManager(url, args) {
                    this._url = url;
                    this._args = args || {};                    
                    this.getXhr = function () { return new XMLHttpRequest };
                    this.getEasy = function () {
                        return this.getXhr().open('GET', this._url, false);
                    };
                    this.getLogicalXhr = args.getXhr || function () { return new XMLHttpRequest };
                    this.getLogical = function() {
                        return this.getLogicalXhr().open('GET', this._url, false);
                    }
                    var localXhr = args.getXhr || function () { return new XMLHttpRequest };
                    this.getLocal = function() {
                        return localXhr().open('GET', this._url, false);
                    }

                    this.getHard = function (async) {
                        return this.getXhr().open('GET', this._url, async);
                    };
                }
                
                // TODO: Can't currently detect these pattern because we don't track the XHR back to object instance assigned to local var
                // var myNetworkManager = new NetworkManager('/test/test.txt', null);
                // var requestA = myNetworkManager.getHard(false);
                // var requestB = myNetworkManager.getXhr().open('GET', '/test/test.txt', null);                                                                
            `,
            errors: [                
                { messageId: MESSAGE_ID, line: 7 },
                { messageId: MESSAGE_ID, line: 11 },
                { messageId: MESSAGE_ID, line: 15 },
            ]
        },
        // JQueryAjax
        {
            code:
            `   // INVALID: JQueryAjax
                var ajaxXhrInit = $.ajax({ async: false, url: "/test/test.txt" });
                var ajaxXhrInit2 = $.ajax({ url: "/test/test.txt", async: false });
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 2 },
                { messageId: MESSAGE_ID, line: 3 }
            ]
        },
        // AjaxAsyncVar
        {
            code:
            `   // INVALID: AjaxAsyncVar
                var asyncAjaxProp = false;
                var ajaxXhrAsyncVar = $.ajax({ async: asyncAjaxProp });
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 }
            ]
        },
        // JQueryAjaxSetup
        {
            code:
            `   // INVALID: JQueryAjaxSetup
                $.ajaxSetup({ async: false });
                var ajaxXhrSetup = $.ajax({ url: "/test/test.txt" });
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 2 }
            ]
        },
        // JQueryAjaxDirectCall
        {
            code:
            `   // INVALID: JQueryAjaxDirectCall
                var ajaxGetXhr = $.get({ async: false, url: "/test/test.txt" });
                var jqueryGetXhr = jQuery.get({ async: false, url: "/test/test.txt" });
                var ajaxGetXhrJson = $.getJSON({ async: false, url: "/test/test.txt" });
                var jqueryGetJsonXhr = jQuery.getJSON({ async: false, url: "/test/test.txt" });
                var ajaxGetScriptXhr = $.getScript({ async: false, url: "/test/test.txt" });
                var jqueryGetScriptXhr = jQuery.getScript({ async: false, url: "/test/test.txt" });
                var ajaxPostXhr = $.post({ async: false, url: "/test/test.txt" });
                var jqueryPostXhr = jQuery.post({ async: false, url: "/test/test.txt" });
                var jQueryAjax = jQuery.ajax({ async: false, url: "test/test/test" });
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 2 },
                { messageId: MESSAGE_ID, line: 3 },
                { messageId: MESSAGE_ID, line: 4 },
                { messageId: MESSAGE_ID, line: 5 },
                { messageId: MESSAGE_ID, line: 6 },
                { messageId: MESSAGE_ID, line: 7 },
                { messageId: MESSAGE_ID, line: 8 },
                { messageId: MESSAGE_ID, line: 9 },
                { messageId: MESSAGE_ID, line: 10 }
            ]
        },
        // AsyncVarAsFunctionJQuery
        {
            code:
            `   // INVALID: AsyncVarAsFunctionJQuery
                var param1 = function () {
                    return false;
                };

                var ajaxXhr1 = $.ajax({ async: param1, url: "www.myUrl.com" });

                function myFunction() {
                    var myVar = false;
                    return myVar;
                };

                var param2 = myFunction();
                var ajaxXhr2 = jQuery.get({ async: param2, url: "www.myUrl.com" });

                var ajaxXhr3 = $.post({ async: myFunction(), url: "www.myUrl.com" });
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 6 },
                { messageId: MESSAGE_ID, line: 14 },
                { messageId: MESSAGE_ID, line: 16 }
            ]
        },
        // AsyncVarAsExpressionJQuery
        {
            code:
            `   // INVALID: AsyncVarAsExpressionJQuery
                var asyncProp1 = testObj1 == testObj2;
                var ajax1 = $.ajax({ async: asyncProp1, url: "www.myUrl.com" });

                var asyncProp2 = testObj3 === testObj4;
                var ajax2 = $.ajax({ async: asyncProp2, url: "www.myUrl.com" });
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 },
                { messageId: MESSAGE_ID, line: 6 }
            ]
        },
        // XrmServiceToolKitRestMethods
        {
            code:
            `   // INVALID: XrmServiceToolKitRestMethods
                var myRestEntityObject = {
                    LogicalName: "myRestEntityName",
                    Prop1: "prop1",
                    Prop2: "prop2"
                };
                var falseAsyncParam = false;

                XrmServiceToolkit.Rest.Create(myRestEntityObject, "myRestEntityObjectType", successCallback, errorCallback, false);
                XrmServiceToolkit.Rest.Create(myRestEntityObject, "myRestEntityObjectType", successCallback, errorCallback, falseAsyncParam);

                XrmServiceToolkit.Rest.Retrieve("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "myRestEntityObjectType", "QueryData", "ExpandData", successCallback, errorCallback, false);
                XrmServiceToolkit.Rest.Retrieve("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "myRestEntityObjectType", "QueryData", "ExpandData", successCallback, errorCallback, falseAsyncParam);

                XrmServiceToolkit.Rest.Update("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", myRestEntityObject, "myRestEntityObjectType", successCallback, errorCallback, false);
                XrmServiceToolkit.Rest.Update("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", myRestEntityObject, "myRestEntityObjectType", successCallback, errorCallback, falseAsyncParam);

                XrmServiceToolkit.Rest.Delete("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "myRestEntityObjectType", successCallback, errorCallback, false);
                XrmServiceToolkit.Rest.Delete("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "myRestEntityObjectType", successCallback, errorCallback, falseAsyncParam);

                XrmServiceToolkit.Rest.RetrieveMultiple("myRestEntityObjectType", "options", successCallback, errorCallback, onCompleteCallback, false);
                XrmServiceToolkit.Rest.RetrieveMultiple("myRestEntityObjectType", "options", successCallback, errorCallback, onCompleteCallback, falseAsyncParam);

                XrmServiceToolkit.Rest.Associate("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "setName1", "929bdc97-97e5-4a86-b219-3a0f9b1014de", "setName2", "associatingRelationship", successCallback, errorCallback, false);
                XrmServiceToolkit.Rest.Associate("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "setName1", "929bdc97-97e5-4a86-b219-3a0f9b1014de", "setName2", "associatingRelationship", successCallback, errorCallback, falseAsyncParam);

                XrmServiceToolkit.Rest.Disassociate("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "setName1", "929bdc97-97e5-4a86-b219-3a0f9b1014de", "associatingRelationship", successCallback, errorCallback, false);
                XrmServiceToolkit.Rest.Disassociate("10ad60c6-f873-47f2-88bd-59c54c4fcaf2", "setName1", "929bdc97-97e5-4a86-b219-3a0f9b1014de", "associatingRelationship", successCallback, errorCallback, falseAsyncParam);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 9 },
                { messageId: MESSAGE_ID, line: 10 },
                { messageId: MESSAGE_ID, line: 12 },
                { messageId: MESSAGE_ID, line: 13 },
                { messageId: MESSAGE_ID, line: 15 },
                { messageId: MESSAGE_ID, line: 16 },
                { messageId: MESSAGE_ID, line: 18 },
                { messageId: MESSAGE_ID, line: 19 },
                { messageId: MESSAGE_ID, line: 21 },
                { messageId: MESSAGE_ID, line: 22 },
                { messageId: MESSAGE_ID, line: 24 },
                { messageId: MESSAGE_ID, line: 25 },
                { messageId: MESSAGE_ID, line: 27 },
                { messageId: MESSAGE_ID, line: 28 }
            ]
        },
        // XrmServiceToolkitSoapMethods
        {
            code:
            `   // INVALID: XrmServiceToolkitSoapMethods
                var mySoapEntityObject = {
                    LogicalName: "mySoapEntityName",
                    Id: "929bdc97-97e5-4a86-b219-3a0f9b1014de",
                    Prop1: "prop1",
                    Prop2: "prop2"
                };

                XrmServiceToolkit.Soap.Create(mySoapEntityObject);
                XrmServiceToolkit.Soap.Create(mySoapEntityObject, null);
                XrmServiceToolkit.Soap.Create(mySoapEntityObject, undefined);

                XrmServiceToolkit.Soap.Update(mySoapEntityObject);
                XrmServiceToolkit.Soap.Update(mySoapEntityObject, null);
                XrmServiceToolkit.Soap.Update(mySoapEntityObject, undefined);

                XrmServiceToolkit.Soap.Delete(mySoapEntityObject.LogicalName, mySoapEntityObject.Id);
                XrmServiceToolkit.Soap.Delete(mySoapEntityObject.LogicalName, "929bdc97-97e5-4a86-b219-3a0f9b1014de", null);
                XrmServiceToolkit.Soap.Delete("mySoapEntityName", "929bdc97-97e5-4a86-b219-3a0f9b1014de", undefined);

                var soapRequest = "soapBodyData";
                XrmServiceToolkit.Soap.Execute(soapRequest);
                XrmServiceToolkit.Soap.Execute(soapRequest, null);
                XrmServiceToolkit.Soap.Execute(soapRequest, undefined);

                XrmServiceToolkit.Soap.Fetch("serialized xml", true);
                XrmServiceToolkit.Soap.Fetch("serialized xml", false, null);
                XrmServiceToolkit.Soap.Fetch("serialized xml", true, undefined);

                var columnSet = ["attribute1", "attribute2", "attribute3"];
                XrmServiceToolkit.Soap.Retrieve(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, columnSet);
                XrmServiceToolkit.Soap.Retrieve("mySoapEntityName", "929bdc97-97e5-4a86-b219-3a0f9b1014de", columnSet, null);
                XrmServiceToolkit.Soap.Retrieve(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, columnSet, undefined);

                XrmServiceToolkit.Soap.RetrieveMultiple("queryString");
                XrmServiceToolkit.Soap.RetrieveMultiple("queryString", null);
                XrmServiceToolkit.Soap.RetrieveMultiple("queryString", undefined);

                var queryOptions = {
                    entityName: "contact",
                    attributes: ["statecode"],
                    values: ["myVal"],
                    columnSet: ["firstname", "lastname", "middlename", "familystatuscode", "ownerid", "creditlimit", "birthdate", "donotemail", "donotphone"],
                    orderBy: ["firstname", "lastname"]
                };

                XrmServiceToolkit.Soap.QueryByAttribute(queryOptions);
                XrmServiceToolkit.Soap.QueryByAttribute(queryOptions, null);
                XrmServiceToolkit.Soap.QueryByAttribute(queryOptions, undefined);

                XrmServiceToolkit.Soap.QueryAll(queryOptions);
                XrmServiceToolkit.Soap.QueryAll(queryOptions, null);
                XrmServiceToolkit.Soap.QueryAll(queryOptions, undefined);

                XrmServiceToolkit.Soap.SetState(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, 2, 1);
                XrmServiceToolkit.Soap.SetState(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, 2, 1, null);
                XrmServiceToolkit.Soap.SetState(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, 2, 1, undefined);

                var relatedBusinessEntities = ["account"];
                XrmServiceToolkit.Soap.Associate("relationshipName", mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", relatedBusinessEntities);
                XrmServiceToolkit.Soap.Associate("relationshipName", mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", relatedBusinessEntities, null);
                XrmServiceToolkit.Soap.Associate("relationshipName", mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", relatedBusinessEntities, undefined);

                XrmServiceToolkit.Soap.Disassociate("relationshipName", mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", relatedBusinessEntities);
                XrmServiceToolkit.Soap.Disassociate("relationshipName", mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", relatedBusinessEntities, null);
                XrmServiceToolkit.Soap.Disassociate("relationshipName", mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", relatedBusinessEntities, undefined);

                XrmServiceToolkit.Soap.Assign(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", "correspondintEntityId");
                XrmServiceToolkit.Soap.Assign(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", "correspondintEntityId", null);
                XrmServiceToolkit.Soap.Assign(mySoapEntityObject.LogicalName, mySoapEntityObject.Id, "correspondingEntityName", "correspondintEntityId", undefined);

                var accessOptions = {
                    targetEntityName : mySoapEntityObject.LogicalName,
                    targetEntityId : mySoapEntityObject.Id,
                    principalEntityName: "systemUser",
                    principalEntityId: "currentUserId",
                    accessRights: ["ReadAccess", "WriteAccess"]
                };

                XrmServiceToolkit.Soap.GrantAccess(accessOptions);
                XrmServiceToolkit.Soap.GrantAccess(accessOptions, null);
                XrmServiceToolkit.Soap.GrantAccess(accessOptions, undefined);

                XrmServiceToolkit.Soap.ModifyAccess(accessOptions);
                XrmServiceToolkit.Soap.ModifyAccess(accessOptions, null);
                XrmServiceToolkit.Soap.ModifyAccess(accessOptions, undefined);

                XrmServiceToolkit.Soap.RevokeAccess(accessOptions);
                XrmServiceToolkit.Soap.RevokeAccess(accessOptions, null);
                XrmServiceToolkit.Soap.RevokeAccess(accessOptions, undefined);

                XrmServiceToolkit.Soap.RetrievePrincipalAccess(accessOptions);
                XrmServiceToolkit.Soap.RetrievePrincipalAccess(accessOptions, null);
                XrmServiceToolkit.Soap.RetrievePrincipalAccess(accessOptions, undefined);

                var entityFilters = ["Entity", "Relationship", "Attributes", "Privileges"];
                XrmServiceToolkit.Soap.RetrieveAllEntitiesMetadata(entityFilters, true);
                XrmServiceToolkit.Soap.RetrieveAllEntitiesMetadata(entityFilters, true, null);
                XrmServiceToolkit.Soap.RetrieveAllEntitiesMetadata(entityFilters, true, undefined);

                XrmServiceToolkit.Soap.RetrieveEntityMetadata(entityFilters, mySoapEntityObject.LogicalName, true);
                XrmServiceToolkit.Soap.RetrieveEntityMetadata(entityFilters, mySoapEntityObject.LogicalName, true, null);
                XrmServiceToolkit.Soap.RetrieveEntityMetadata(entityFilters, mySoapEntityObject.LogicalName, true, undefined);

                XrmServiceToolkit.Soap.RetrieveAttributeMetadata(mySoapEntityObject.LogicalName, "Privileges", false);
                XrmServiceToolkit.Soap.RetrieveAttributeMetadata(mySoapEntityObject.LogicalName, "Attributes", false, null);
                XrmServiceToolkit.Soap.RetrieveAttributeMetadata(mySoapEntityObject.LogicalName, "Relationship", true, undefined);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 9 },
                { messageId: MESSAGE_ID, line: 10 },
                { messageId: MESSAGE_ID, line: 11 },
                { messageId: MESSAGE_ID, line: 13 },
                { messageId: MESSAGE_ID, line: 14 },
                { messageId: MESSAGE_ID, line: 15 },
                { messageId: MESSAGE_ID, line: 17 },
                { messageId: MESSAGE_ID, line: 18 },
                { messageId: MESSAGE_ID, line: 19 },
                { messageId: MESSAGE_ID, line: 22 },
                { messageId: MESSAGE_ID, line: 23 },
                { messageId: MESSAGE_ID, line: 24 },
                { messageId: MESSAGE_ID, line: 26 },
                { messageId: MESSAGE_ID, line: 27 },
                { messageId: MESSAGE_ID, line: 28 },
                { messageId: MESSAGE_ID, line: 31 },
                { messageId: MESSAGE_ID, line: 32 },
                { messageId: MESSAGE_ID, line: 33 },
                { messageId: MESSAGE_ID, line: 35 },
                { messageId: MESSAGE_ID, line: 36 },
                { messageId: MESSAGE_ID, line: 37 },
                { messageId: MESSAGE_ID, line: 47 },
                { messageId: MESSAGE_ID, line: 48 },
                { messageId: MESSAGE_ID, line: 49 },
                { messageId: MESSAGE_ID, line: 51 },
                { messageId: MESSAGE_ID, line: 52 },
                { messageId: MESSAGE_ID, line: 53 },
                { messageId: MESSAGE_ID, line: 55 },
                { messageId: MESSAGE_ID, line: 56 },
                { messageId: MESSAGE_ID, line: 57 },
                { messageId: MESSAGE_ID, line: 60 },
                { messageId: MESSAGE_ID, line: 61 },
                { messageId: MESSAGE_ID, line: 62 },
                { messageId: MESSAGE_ID, line: 64 },
                { messageId: MESSAGE_ID, line: 65 },
                { messageId: MESSAGE_ID, line: 66 },
                { messageId: MESSAGE_ID, line: 68 },
                { messageId: MESSAGE_ID, line: 69 },
                { messageId: MESSAGE_ID, line: 70 },
                { messageId: MESSAGE_ID, line: 80 },
                { messageId: MESSAGE_ID, line: 81 },
                { messageId: MESSAGE_ID, line: 82 },
                { messageId: MESSAGE_ID, line: 84 },
                { messageId: MESSAGE_ID, line: 85 },
                { messageId: MESSAGE_ID, line: 86 },
                { messageId: MESSAGE_ID, line: 88 },
                { messageId: MESSAGE_ID, line: 89 },
                { messageId: MESSAGE_ID, line: 90 },
                { messageId: MESSAGE_ID, line: 92 },
                { messageId: MESSAGE_ID, line: 93 },
                { messageId: MESSAGE_ID, line: 94 },
                { messageId: MESSAGE_ID, line: 97 },
                { messageId: MESSAGE_ID, line: 98 },
                { messageId: MESSAGE_ID, line: 99 },
                { messageId: MESSAGE_ID, line: 101 },
                { messageId: MESSAGE_ID, line: 102 },
                { messageId: MESSAGE_ID, line: 103 },
                { messageId: MESSAGE_ID, line: 105 },
                { messageId: MESSAGE_ID, line: 106 },
                { messageId: MESSAGE_ID, line: 107 }
            ]
        },
        // SoapSDK
        {
            code:
            `   // INVALID: SoapSDK
                var soapSdkEntity = {
                    LogicalName: "soapSdkEntity",
                    Id: "65b410eb-4557-4225-862d-e89de08c48c8",
                    Prop1: "prop1",
                    Prop2: "prop2"
                };

                var relatedEntities = ["account", "contacts"];

                Sdk.Sync.associate(soapSdkEntity.LogicalName, soapSdkEntity.Id, "Many to many", relatedEntities);
                Sdk.Sync.create(soapSdkEntity);
                Sdk.Sync.disassociate(soapSdkEntity.LogicalName, soapSdkEntity.Id, "One to many", relatedEntities);
                Sdk.Sync.execute(request);
                Sdk.Sync.retrieve(soapSdkEntity.LogicalName, soapSdkEntity.Id, columnSet);
                Sdk.Sync.retrieveMultiple(query);
                Sdk.Sync.update(soapSdkEntity);
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 11 },
                { messageId: MESSAGE_ID, line: 12 },
                { messageId: MESSAGE_ID, line: 13 },
                { messageId: MESSAGE_ID, line: 14 },
                { messageId: MESSAGE_ID, line: 15 },
                { messageId: MESSAGE_ID, line: 16 },
                { messageId: MESSAGE_ID, line: 17 }
            ]
        },
        // BuiltInSyncMethods
        {
            code:
            `   // INVALID: BuiltInSyncMethods
                var businessUnitId = XrmServiceToolkit.Soap.GetCurrentUserBusinessUnitId();
                var userId = XrmServiceToolkit.Soap.GetCurrentUserId();
                var listOfCurrentUserRoles = XrmServiceToolkit.Soap.GetCurrentUserRoles();
                var currentUserRole = XrmServiceToolkit.Soap.IsCurrentUserRole();
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 2 },
                { messageId: MESSAGE_ID, line: 3 },
                { messageId: MESSAGE_ID, line: 4 },
                { messageId: MESSAGE_ID, line: 5 }
            ]
        }
    ]
});
