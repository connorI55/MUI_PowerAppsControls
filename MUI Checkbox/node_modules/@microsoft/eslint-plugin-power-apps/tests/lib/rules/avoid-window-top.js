// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const rule = require("../../../lib/rules/avoid-window-top");
const RuleTester = require("eslint").RuleTester;

//------------------------------------------------------------------------------
// CONSTANTS
//------------------------------------------------------------------------------

const MESSAGE_ID = "message2";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const ruleTester = new RuleTester();

ruleTester.run("avoid-window-top", rule, {
    valid: [
        // jQuery selector with null arguments
        {
            code:
            `
                $();
                var j = $();
                function myFunc(func) {
                    return func();
                }
                myFunc($());
                var f = $().find("me");
            `
        }
    ],
    invalid: [
        // AssignmentOfWindow
        {
            code:
            `    // INVALID: AssignmentOfWindow
                 var myCustomWindowObject;
                 window.top = myCustomWindowObject;
                 window.top.document.getElementsByClassName("mscrm-globalqc-iframe")[0].style.height == "0px";
                 window.parent.parent = myCustomWindowObject;                 
                 window.parent.parent.document.getElementsByClassName("mscrm-globalqc-iframe")[0].style.height = "400px";
                 
                 var myWindowObject = window;
                 myWindowObject.top;
                 
                 var myWindowObject2 = window;
                 myWindowObject2.parent.parent;
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 },
                { messageId: MESSAGE_ID, line: 4 },
                { messageId: MESSAGE_ID, line: 5 },
                { messageId: MESSAGE_ID, line: 6 },                                
                { messageId: MESSAGE_ID, line: 9 },
                { messageId: MESSAGE_ID, line: 12 }
            ]
        },
        // AssignmentOfWindowTop
        {
            code:
            `    // INVALID: AssignmentOfWindowTop
                 var windowTopAssignment1 = window.top;
                  
                 var windowTopAssignment2;
                 windowTopAssignment2 = window.top;
                  
                 var windowAssignment = window;
                 windowAssignment.parent.parent;
                  
                 var windowParentAssignment1 = window.parent;
                 windowParentAssignment1.parent;
                  
                 var windowParentParentAssignment1 = window.parent.parent;
                  
                 var windowParentParentAssignment2;
                 windowParentParentAssignment2 = window.parent.parent;
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 2 },
                { messageId: MESSAGE_ID, line: 5 },
                { messageId: MESSAGE_ID, line: 8 },
                { messageId: MESSAGE_ID, line: 11 },
                { messageId: MESSAGE_ID, line: 13 },
                { messageId: MESSAGE_ID, line: 16 }
            ]
        },
        // JQuery
        {
            code:
            `    // INVALID: JQuery
                 var windowTopJQuery = $(window.top);
                 var elementOnWindowTopJQuery = $(window.top).find("myOjbect");
                 var x = $(window.top).find("myOjbect").title;
                 
                 var windowParentParentJQuery = $(window.parent.parent);
                 var elementOnWindowParentParentJQuery = $(window.parent.parent).getElementsById("testId");
                 var windowParentJQuery = $(window.parent);
                 windowParentJQuery.parent;
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 2 },
                { messageId: MESSAGE_ID, line: 3 },
                { messageId: MESSAGE_ID, line: 4 },
                { messageId: MESSAGE_ID, line: 6 },
                { messageId: MESSAGE_ID, line: 7 },
                { messageId: MESSAGE_ID, line: 9 }
            ]
        },
        // Check
        {
            code:
            `    // INVALID: Check
                 function fn() {
                     if (myWindow == window.top) {
                         return true;
                     }
                     
                     if (myWindow != window.parent.parent) {
                         return false;
                     }
                 }
            `,
            errors: [
                { messageId: MESSAGE_ID, line: 3 },
                { messageId: MESSAGE_ID, line: 7 }
            ]
        }
    ]
});
