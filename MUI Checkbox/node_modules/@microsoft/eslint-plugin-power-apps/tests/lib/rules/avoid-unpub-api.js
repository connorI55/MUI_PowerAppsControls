// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const rule = require("../../../lib/rules/avoid-unpub-api");
const RuleTester = require("eslint").RuleTester;

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const ruleTester = new RuleTester();

ruleTester.run("avoid-unpub-api", rule, {
    valid: [
        // XrmPage
        `    // VALID: XrmPage
             var attribute = Xrm.Page.data.entity.attributes.get("new_name");
             parent.Xrm.Page.data.entity.save();
        `,
        // XrmMobile
        `    // VALID: XrmMobile
             var isOffline = Xrm.Mobile.offline.isOfflineEnabled('account');
        `,
        // V9Namespaces
        `    // VALID: V9Namespaces
             var fetchXml = "<fetch></fetch>";
             Xrm.Encoding.xmlEncode(fetchXml);
             Parent.Xrm.Encoding.xmlEncode(fetchXml);
             
             var canDoOffline = Xrm.WebApi.isAvailableOffline("contact");
             
             var currentPosition = Xrm.Device.getCurrentPosition();
             
             Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(closeCallback, errorCallback);
             
             Xrm.Panel.loadPanel("url", "title");
             
             Xrm.Utility.closeProgressIndicator();
        `,
        // Xrm.App
        `    // VALID: Xrm.App
            
            // define notification object
            var notification = 
            {
                type: 2,
                level: 2, //error
                message: "Test error notification"
            }
        
            Xrm.App.addGlobalNotification(notification).then(
                function success(result) {
                    console.log("Notification created with ID: " + result);
                    // perform other operations as required on notification display
                },
                function (error) {
                    console.log(error.message);
                    // handle error conditions
                }
            );
        `        
    ],
    invalid: [
        // Namespaces
        {
            code:
            `    // INVALID: Namespaces
                 var myObj = new Microsoft.Crm.CommandBar();
                 var utils = Mscrm.InternalUtilities;
                 
                 Xrm.Internal.openDialog("http://mysite", null, null, function () { }, callback);
                 
                 function callback(args) {                 
                 }
            `,
            errors: [
                { line: 2 },
                { line: 3 },
                { line: 5 }
            ]
        },
        // GlobalVars
        {
            code:
            `    // INVALID: GlobalVars
                 var version = APPLICATION_FULL_VERSION;
                 
                 if (AUTO_SAVE_ENABLED) {
                     for (var i = 0; i < USER_ROLES.length; i++) {
                         var roleId = USER_ROLES[i];
                     }
                 }
            `,
            errors: [
                { line: 2 },
                { line: 4 },
                { line: 5 },
                { line: 6 }
            ]
        },
        // Styles
        {
            code:
            `    // INVALID: Styles
                 $(dashboardFrame.document.body).find(".ms-crm-Field-Data-Print");
                 
                 var cols = $(tr).find("td.ms-crm-List-DataCell-Associated-Lite");  
            `,
            errors: [
                { line: 2 },
                { line: 4 }
            ]
        },
        // GlobalFuncs
        {
            code:
            `    // INVALID: GlobalFuncs
                 attachWindowOnBeforeUnload(function () { });
                 
                 var grid = getCrmGrid();
                 var token = GetCrmWrpcToken("http://url");
            `,
            errors: [
                { line: 2 },
                { line: 4 },
                { line: 5 }
            ]
        },
        // Parent
        {
            code:
            `    // INVALID: Parent
                 var globalXrmParent = window.parent;
                 var xrmParent = window.parent;
                 
                 window.parent.parent.getCrmGrid();
                 window.parent.getCrmGrid();
                 parent.getCrmGrid();
                 
                 globalXrmParent.getCrmGrid();
                 xrmParent.getCrmGrid();
                 
                 if (parent.IS_OUTLOOK_CLIENT) {
                     window.parent.Xrm.Internal.openDialog("http://mysite", null, null, function () { });
                     parent.Xrm.Internal.openDialog("http://mysite", null, null, function () { });
                 }
                 
                 var dialogOptions = new xrmParent.Xrm.DialogOptions();
                 dialogOptions.width = 615;
                 dialogOptions.height = 660;
                 
                 if (globalXrmParent.IS_ONPREMISE) {
                     xrmParent.Xrm.Internal.openDialog(xrmParent.Mscrm.CrmUri.create(url).toString(), dialogOptions, null, CallbackFunction);
                 }
                 function CallbackFunction(returnValue) { } 
            `,
            errors: [
                { line: 5 },
                { line: 6 },
                { line: 7 },
                { line: 9 },
                { line: 10 },
                { line: 12 },
                { line: 13 },
                { line: 14 },
                { line: 17 },
                { line: 21 },
                { line: 22 },
                { line: 22 }
            ]
        }
    ]
});
