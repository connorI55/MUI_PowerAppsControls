// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const rule = require("../../../lib/rules/avoid-2011-api");
const RuleTester = require("eslint").RuleTester;

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

const MESSAGE_ID_CURRENTCONTROL = "message4";
const MESSAGE_ID_AUTHHEADER = "message5";
const MESSAGE_ID_OUTLOOK = "message6";
const MESSAGE_ID_GETURL = "message7";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const ruleTester = new RuleTester();

ruleTester.run("avoid-2011-api", rule, {
    valid: [
        // Local context
        `    // VALID: Local context
             var url;
             var currentClient;
             var clientState;
             
             url = Xrm.Page.context.getClientUrl()
             currentClient = Xrm.Page.context.client.getClient();
             clientState = Xrm.Page.context.client.getClientState();
             
             // Assign context to a local var
             var ctx = Xrm.Page.context;
             var client = ctx.client;
             
             url = ctx.getClientUrl();
             currentClient = client.getClient();
             clientState = client.getClientState();
        `,
        // GlobalContext
        `    // VALID: GlobalContext
             url = GetGlobalContext().getClientUrl()
             currentClient = GetGlobalContext().client.getClient();
             clientState = GetGlobalContext().client.getClientState();
             
             // Assign context to a local var
             var ctx = GetGlobalContext();
             var client = ctx.client;
             
             url = ctx.getClientUrl();
             currentClient = client.getClient();
             clientState = client.getClientState();
        `
    ],
    invalid: [
        // Local context
        {
            code:
            `    // INVALID: Local context
                 var url;
                 var isOutlook;
                 var isOnline;
                 var authHeader;
                 var currentControl;
                 
                 url = Xrm.Page.context.getServerUrl();
                 isOutlook = Xrm.Page.context.isOutlookClient();
                 isOnline = Xrm.Page.context.isOutlookOnline();
                 authHeader = Xrm.Page.context.getAuthenticationHeader();
                 currentControl = Xrm.Page.ui.getCurrentControl();
                 
                 // Assign context to a local var
                 var page = Xrm.Page;    
                 var ctx = page.context;
                 
                 url = ctx.getServerUrl();    
                 isOutlook = ctx.isOutlookClient();
                 isOnline = ctx.isOutlookOnline();
                 authHeader = ctx.getAuthenticationHeader();
            `,
            errors: [
                { messageId: MESSAGE_ID_GETURL, line: 8 },
                { messageId: MESSAGE_ID_OUTLOOK, line: 9 },
                { messageId: MESSAGE_ID_OUTLOOK, line: 10 },
                { messageId: MESSAGE_ID_AUTHHEADER, line: 11 },
                { messageId: MESSAGE_ID_CURRENTCONTROL, line: 12 },
                { messageId: MESSAGE_ID_GETURL, line: 18 },
                { messageId: MESSAGE_ID_OUTLOOK, line: 19 },
                { messageId: MESSAGE_ID_OUTLOOK, line: 20 },
                { messageId: MESSAGE_ID_AUTHHEADER, line: 21 }
            ]
        },
        // GlobalContext
        {
            code:
            `    // INVALID: GlobalContext
                 url = GetGlobalContext().getServerUrl();
                 isOutlook = GetGlobalContext().isOutlookClient();
                 isOnline = GetGlobalContext().isOutlookOnline();
                 authHeader = GetGlobalContext().getAuthenticationHeader();
                 
                 // Assign context to a local var
                 var ctx = GetGlobalContext();
                 
                 url = ctx.getServerUrl();    
                 isOutlook = ctx.isOutlookClient();
                 isOnline = ctx.isOutlookOnline();
                 authHeader = ctx.getAuthenticationHeader();
            `,
            errors: [
                { messageId: MESSAGE_ID_GETURL, line: 2 },
                { messageId: MESSAGE_ID_OUTLOOK, line: 3 },
                { messageId: MESSAGE_ID_OUTLOOK, line: 4 },
                { messageId: MESSAGE_ID_AUTHHEADER, line: 5 },
                { messageId: MESSAGE_ID_GETURL, line: 10 },
                { messageId: MESSAGE_ID_OUTLOOK, line: 11 },
                { messageId: MESSAGE_ID_OUTLOOK, line: 12 },
                { messageId: MESSAGE_ID_AUTHHEADER, line: 13 }
            ]
        }
    ]
});
