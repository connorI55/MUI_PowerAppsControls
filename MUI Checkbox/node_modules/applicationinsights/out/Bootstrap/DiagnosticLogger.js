"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticLogger = void 0;
var path = __importStar(require("path"));
var FileHelpers_1 = require("./Helpers/FileHelpers");
var Constants_1 = require("../Declarations/Constants");
var Util = require("../Library/Util");
var LOGGER_NAME = "applicationinsights.extension.diagnostics";
var DiagnosticLogger = /** @class */ (function () {
    function DiagnosticLogger(_writer, instrumentationKey) {
        if (_writer === void 0) { _writer = console; }
        if (instrumentationKey === void 0) { instrumentationKey = "unknown"; }
        this._writer = _writer;
        this._defaultProperties = {
            language: "nodejs",
            operation: "Startup",
            siteName: process.env.WEBSITE_SITE_NAME,
            ikey: "unknown",
            extensionVersion: process.env.ApplicationInsightsAgent_EXTENSION_VERSION,
            sdkVersion: Constants_1.APPLICATION_INSIGHTS_SDK_VERSION,
            subscriptionId: process.env.WEBSITE_OWNER_NAME ? process.env.WEBSITE_OWNER_NAME.split("+")[0] : null
        };
        this._defaultProperties.ikey = instrumentationKey;
    }
    DiagnosticLogger.prototype.logMessage = function (diagnosticLog) {
        var props = Object.assign({}, this._defaultProperties, diagnosticLog.properties);
        var diagnosticMessage = {
            properties: props,
            logger: LOGGER_NAME,
            message: diagnosticLog.message,
            level: "INFO" /* INFO */,
            time: new Date().toUTCString()
        };
        this._writer.log(diagnosticMessage);
    };
    DiagnosticLogger.prototype.logError = function (diagnosticLog) {
        var message = diagnosticLog.message;
        if (diagnosticLog.exception) {
            message += " Error: " + Util.dumpObj(diagnosticLog.exception);
        }
        var props = Object.assign({}, this._defaultProperties, diagnosticLog.properties);
        var diagnosticMessage = {
            properties: props,
            logger: LOGGER_NAME,
            message: message,
            level: "ERROR" /* ERROR */,
            time: new Date().toUTCString()
        };
        this._writer.error(diagnosticMessage);
    };
    DiagnosticLogger.DEFAULT_FILE_NAME = "application-insights-extension.log";
    DiagnosticLogger.DEFAULT_LOG_DIR = process.env.APPLICATIONINSIGHTS_LOGDIR || path.join(FileHelpers_1.homedir, "LogFiles/ApplicationInsights");
    return DiagnosticLogger;
}());
exports.DiagnosticLogger = DiagnosticLogger;
//# sourceMappingURL=DiagnosticLogger.js.map