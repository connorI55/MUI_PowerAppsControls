{"version":3,"file":"Helpers.js","sourceRoot":"","sources":["../../Bootstrap/Helpers.ts"],"names":[],"mappings":";;;AAAA,wDAAkD;AAClD,yCAAiE;AAGjE,IAAM,oCAAoC,GAAG,8DAA8D,CAAC;AAE5G,SAAgB,gBAAgB,CAAC,OAAyB;IACtD,IAAI;QACA,+HAA+H;QAC/H,IAAI,WAAW,SAAQ,CAAC;QACxB,IAAI;YACA,YAAY;YACZ,WAAW,GAAI,OAAO,CAAC,OAAe,CAAC,qBAAqB,EAAE,EAAE,KAAK,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;SAC7F;QAAC,OAAO,CAAC,EAAE;YACR,YAAY;YACZ,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,mCAAmC,CAAC,CAAC;SACtF;QACD;;;;UAIE;QACF,IACI,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAChC,CAAC,WAAW,KAAK,oCAAoC,IAAI,sBAAO,EAAE,CAAC,EACrE;YACE,IAAM,aAAa,GAAkB;gBACjC,OAAO,EAAE,sIAAsI,GAAG,WAAW;gBAC7J,UAAU,EAAE;oBACR,OAAO,EAAE,+BAAmB,CAAC,SAAS;iBACzC;aACJ,CAAC;YACF,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAChC,OAAO,IAAI,CAAC;SACf;aACI;YACD,2FAA2F;YAC3F,OAAO,KAAK,CAAC;SAChB;KACJ;IAAC,OAAO,CAAC,EAAE;QACR,mGAAmG;QACnG,OAAO,KAAK,CAAC;KAChB;AACL,CAAC;AArCD,4CAqCC","sourcesContent":["import { isLinux } from \"../Library/PrefixHelper\";\r\nimport { DiagnosticLog, DiagnosticMessageId } from \"./DataModel\";\r\nimport { DiagnosticLogger } from \"./DiagnosticLogger\";\r\n\r\nconst LINUX_USER_APPLICATION_INSIGHTS_PATH = \"/node_modules/applicationinsights/out/applicationinsights.js\";\r\n\r\nexport function sdkAlreadyExists(_logger: DiagnosticLogger): boolean {\r\n    try {\r\n        // appInstance should either resolve to user SDK or crash. If it resolves to attach SDK, user probably modified their NODE_PATH\r\n        let appInstance: string;\r\n        try {\r\n            // Node 8.9+\r\n            appInstance = (require.resolve as any)(\"applicationinsights\", { paths: [process.cwd()] });\r\n        } catch (e) {\r\n            // Node <8.9\r\n            appInstance = require.resolve(process.cwd() + \"/node_modules/applicationinsights\");\r\n        }\r\n        /** \r\n         * If loaded instance is in Azure machine home path do not attach the SDK, this means customer already instrumented their app.\r\n         * Linux App Service doesn't append the full cwd to the require.resolve, so we need to check for the relative path we expect\r\n         * if application insights is being imported in the user app code.\r\n        */\r\n        if (\r\n            appInstance.indexOf(\"home\") > -1 ||\r\n            (appInstance === LINUX_USER_APPLICATION_INSIGHTS_PATH && isLinux())\r\n        ) {\r\n            const diagnosticLog: DiagnosticLog = {\r\n                message: \"Application Insights SDK already exists. Module is already installed in this application; not re-attaching. Installed SDK location: \" + appInstance,\r\n                properties: {\r\n                    \"msgId\": DiagnosticMessageId.sdkExists\r\n                }\r\n            };\r\n            _logger.logError(diagnosticLog);\r\n            return true;\r\n        }\r\n        else {\r\n            // ApplicationInsights could be loaded outside of customer application, attach in this case\r\n            return false;\r\n        }\r\n    } catch (e) {\r\n        // crashed while trying to resolve \"applicationinsights\", so SDK does not exist. Attach appinsights\r\n        return false;\r\n    }\r\n}"]}