"use strict";
// Copyright (C) Microsoft Corporation. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DesignTypesGenerator = void 0;
/// <reference path="../../common/typings/controlmanifest.d.ts"/>
// reference for typescript compiler api: https://github.com/microsoft/TypeScript-wiki/blob/master/Using-the-Compiler-API.md
const ts = require("typescript");
class DesignTypesGenerator {
    generateDesignTypes(parsedDesignMaps) {
        if (ts.factory === undefined) {
            throw new Error('Please update typescript version to 4.2.4 or above to use PCF Theming feature.');
        }
        this._parsedDesignMap = parsedDesignMaps;
        const resultFile = ts.createSourceFile(
        /*fileName*/ 'output.ts', 
        /*sourceText*/ '', 
        /*languageVersion*/ ts.ScriptTarget.Latest, 
        /*setParentNodes*/ false, 
        /*scriptKind*/ ts.ScriptKind.TS);
        const printer = ts.createPrinter({
            newLine: ts.NewLineKind.LineFeed
        });
        const result = printer.printList(ts.ListFormat.MultiLine, this.makeAST(), resultFile);
        return result;
    }
    makeAST() {
        const iDesignInterface = this.generateDesignInterface();
        const designContextInterface = this.generateDesignContextInterface();
        const designComponentInterface = this.generateDesignComponentInterface();
        return ts.factory.createNodeArray([
            iDesignInterface,
            designContextInterface,
            designComponentInterface
        ], false);
    }
    generateDesignInterface() {
        return ts.factory.createInterfaceDeclaration(undefined, [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)], ts.factory.createIdentifier('IDesign'), undefined, undefined, this.getDefaultInterfaceMembers().concat(this.getInterfaceMembersFromDesignMappingXml()));
    }
    generateDesignComponentInterface() {
        return ts.factory.createInterfaceDeclaration(undefined, [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)], ts.factory.createIdentifier('DesignComponent'), [
            ts.factory.createTypeParameterDeclaration(ts.factory.createIdentifier('TInputs'), undefined, undefined),
            ts.factory.createTypeParameterDeclaration(ts.factory.createIdentifier('TOutputs'), undefined, undefined),
            ts.factory.createTypeParameterDeclaration(ts.factory.createIdentifier('TDesign'), undefined, undefined)
        ], [
            ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [
                ts.factory.createExpressionWithTypeArguments(ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier('ComponentFramework'), ts.factory.createIdentifier('StandardControl')), [
                    ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('TInputs'), undefined),
                    ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('TOutputs'), undefined)
                ])
            ])
        ], [
            ts.factory.createMethodSignature(undefined, ts.factory.createIdentifier('init'), undefined, undefined, [
                ts.factory.createParameterDeclaration(undefined, undefined, undefined, ts.factory.createIdentifier('context'), undefined, ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('DesignContext'), [
                    ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('TInputs'), undefined),
                    ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('TDesign'), undefined)
                ]), undefined),
                ts.factory.createParameterDeclaration(undefined, undefined, undefined, ts.factory.createIdentifier('notifyOutputChanged'), ts.factory.createToken(ts.SyntaxKind.QuestionToken), ts.factory.createFunctionTypeNode(undefined, [], ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)), undefined),
                ts.factory.createParameterDeclaration(undefined, undefined, undefined, ts.factory.createIdentifier('state'), ts.factory.createToken(ts.SyntaxKind.QuestionToken), ts.factory.createTypeReferenceNode(ts.factory.createQualifiedName(ts.factory.createIdentifier('ComponentFramework'), ts.factory.createIdentifier('Dictionary')), undefined), undefined),
                ts.factory.createParameterDeclaration(undefined, undefined, undefined, ts.factory.createIdentifier('container'), ts.factory.createToken(ts.SyntaxKind.QuestionToken), ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('HTMLDivElement'), undefined), undefined)
            ], ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)),
            ts.factory.createMethodSignature(undefined, ts.factory.createIdentifier('updateView'), undefined, undefined, [
                ts.factory.createParameterDeclaration(undefined, undefined, undefined, ts.factory.createIdentifier('context'), undefined, ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('DesignContext'), [
                    ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('TInputs'), undefined),
                    ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('TDesign'), undefined)
                ]), undefined)
            ], ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)),
            ts.factory.createMethodSignature(undefined, ts.factory.createIdentifier('destroy'), undefined, undefined, [], ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)),
            ts.factory.createMethodSignature(undefined, ts.factory.createIdentifier('getOutputs'), ts.factory.createToken(ts.SyntaxKind.QuestionToken), undefined, [], ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('TOutputs'), undefined))
        ]);
    }
    generateDesignContextInterface() {
        return ts.factory.createInterfaceDeclaration(undefined, [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)], ts.factory.createIdentifier('DesignContext'), [
            ts.factory.createTypeParameterDeclaration(ts.factory.createIdentifier('TInputs'), undefined, undefined),
            ts.factory.createTypeParameterDeclaration(ts.factory.createIdentifier('TDesign'), undefined, undefined)
        ], [
            ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [
                ts.factory.createExpressionWithTypeArguments(ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier('ComponentFramework'), ts.factory.createIdentifier('Context')), [
                    ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('TInputs'), undefined)
                ])
            ])
        ], [
            ts.factory.createPropertySignature(undefined, ts.factory.createIdentifier('design'), undefined, ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('IDesign'), undefined))
        ]);
    }
    getDefaultInterfaceMembers() {
        return [
            ts.factory.createPropertySignature(undefined, ts.factory.createIdentifier('DesignLanguageId'), undefined, ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword)),
            ts.factory.createPropertySignature(undefined, ts.factory.createIdentifier('ThemeId'), undefined, ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword))
        ];
    }
    getInterfaceMembersFromDesignMappingXml() {
        const designProperties = Object.keys(this._parsedDesignMap)
            .filter((key) => key !== '$')
            .map((key) => {
            return ts.factory.createPropertySignature(undefined, ts.factory.createIdentifier(key), undefined, ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword));
        });
        return designProperties;
    }
    getTypeParameterDeclaration() {
        const typeParamDeclaration = [
            ts.factory.createTypeParameterDeclaration(ts.factory.createIdentifier('TInputs'), undefined, undefined),
            ts.factory.createTypeParameterDeclaration(ts.factory.createIdentifier('TDesign'), undefined, undefined)
        ];
        return typeParamDeclaration;
    }
}
exports.DesignTypesGenerator = DesignTypesGenerator;

//# sourceMappingURL=designTypesGenerator.js.map
