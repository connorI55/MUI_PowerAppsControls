"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformLibrariesHandler = exports.hasPlatformLibs = void 0;
const fs = require("fs");
const path = require("path");
const semver = require("semver");
const locale_1 = require("./generated/locale");
const diagnosticMessages_generated_1 = require("./diagnosticMessages.generated");
function getFilterCallback(matchRegex, alias) {
    return ({ context, request }, callback) => {
        if (matchRegex.test(request)) {
            return callback(undefined, alias);
        }
        callback();
    };
}
function versionComparer(a, b) {
    return semver.rcompare(a.maxVersion, b.maxVersion);
}
function hasPlatformLibs(control) {
    return control.getControlManifest().data.manifest.control.resources['platform-library'] !== undefined;
}
exports.hasPlatformLibs = hasPlatformLibs;
// convert control's platform-library nodes to record mapping library to highest version specified
function parsePlatformLibs(control) {
    if (!hasPlatformLibs(control)) {
        return {};
    }
    return control.getControlManifest().data.manifest.control.resources['platform-library'].reduce((list, curr) => {
        var _a;
        const name = (_a = curr.$.name) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        const ver = curr.$.version;
        if (!ver || !name || !semver.valid(ver)) {
            return list;
        }
        else if (!list[name] || semver.gt(ver, list[name])) {
            list[name] = ver;
        }
        return list;
    }, {});
}
class PlatformLibrariesHandler {
    constructor(platformLibsVersionsFilePath) {
        this._platformLibsVersions =
            JSON.parse(fs.readFileSync(platformLibsVersionsFilePath !== null && platformLibsVersionsFilePath !== void 0 ? platformLibsVersionsFilePath : path.resolve(__dirname, 'PlatformLibraryVersions.json'), { encoding: 'utf8' }));
    }
    getLatestVersions(control) {
        var _a;
        const map = {};
        let extObj = [map];
        const specifiedLibraries = parsePlatformLibs(control);
        if (specifiedLibraries['fluent']) {
            const supportedLib = this.getSupportedVersion('fluent', specifiedLibraries['fluent']);
            if (!supportedLib) {
                throw new Error((0, locale_1.translateA)(diagnosticMessages_generated_1.strings.validation_property_platformlibrary_range_error.key, ['fluent', specifiedLibraries['fluent']]));
            }
            if (semver.satisfies(supportedLib.platformVersion, '<9.0.0')) {
                map['@fluentui/react'] = supportedLib.libAlias;
                extObj.push(getFilterCallback(/^(?:@fluentui\/(?:react$|react\/))/, supportedLib.libAlias));
            }
            else {
                map['@fluentui/react-components'] = supportedLib.libAlias;
                extObj.push(getFilterCallback(/^(?:@fluentui\/react-(?:components$|components\/))/, supportedLib.libAlias));
            }
        }
        if (specifiedLibraries['react']) {
            map['react'] = (_a = this.getSupportedVersion('react', specifiedLibraries['react'])) === null || _a === void 0 ? void 0 : _a.libAlias;
            if (!map['react']) {
                throw new Error((0, locale_1.translateA)(diagnosticMessages_generated_1.strings.validation_property_platformlibrary_range_error.key, ['react', specifiedLibraries['react']]));
            }
        }
        return extObj;
    }
    getSupportedVersion(library, version) {
        var _a;
        if (!library || !version) {
            return undefined;
        }
        const versions = (_a = this._platformLibsVersions[library.toLowerCase()]) === null || _a === void 0 ? void 0 : _a.filter((x) => semver.satisfies(version, `>=${x.minVersion} <=${x.maxVersion}`)).sort(versionComparer);
        return (versions === null || versions === void 0 ? void 0 : versions.length) ? versions[0] : undefined;
    }
}
exports.PlatformLibrariesHandler = PlatformLibrariesHandler;

//# sourceMappingURL=platformLibrariesHandler.js.map
