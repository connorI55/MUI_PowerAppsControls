"use strict";
// Copyright (C) Microsoft Corporation. All rights reserved.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EslintValidate = void 0;
const diagnosticMessages_generated_1 = require("./diagnosticMessages.generated");
const { ESLint } = require('eslint');
function EslintValidate(diag, controlName, fix = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const eslint = new ESLint({
            errorOnUnmatchedPattern: false,
            extensions: ['.ts', '.tsx'],
            fix
        });
        // Lint files
        const results = yield eslint.lintFiles(controlName);
        // Modify the files with the fixed code.
        if (fix)
            yield ESLint.outputFixes(results);
        let errorCount = 0;
        results.forEach(result => errorCount += result.errorCount);
        if (errorCount > 0) {
            // Format the results.
            const formatter = yield eslint.loadFormatter('stylish');
            const resultText = formatter.format(results);
            diag.pushA(diagnosticMessages_generated_1.strings.eslint_validation_error, [resultText]);
            return Promise.reject();
        }
        return Promise.resolve(true);
    });
}
exports.EslintValidate = EslintValidate;

//# sourceMappingURL=eslintValidator.js.map
